// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediaappsingnal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mediaappsingnal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MediaAppSignalMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaAppSignalMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaAppSignalMessage_MediaMessageBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaAppSignalMessage_MediaMessageBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaSignalMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaSignalMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaSignalMessage_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaSignalMessage_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaSignalMessage_LoginResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaSignalMessage_LoginResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaSignalMessage_Logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaSignalMessage_Logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaSignalMessage_OnlineStateChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaSignalMessage_OnlineStateChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaSignalMessage_ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaSignalMessage_ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaSignalMessage_pong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaSignalMessage_pong_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaCallMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaCallMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaCallMessage_BaseMesssage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaCallMessage_BaseMesssage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaCallMessage_CallInitiate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaCallMessage_CallInitiate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaCallMessage_CallAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaCallMessage_CallAccept_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaCallMessage_CallTerminate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaCallMessage_CallTerminate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaCallMessage_CallInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaCallMessage_CallInvite_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mediaappsingnal_2eproto() {
  protobuf_AddDesc_mediaappsingnal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mediaappsingnal.proto");
  GOOGLE_CHECK(file != NULL);
  MediaAppSignalMessage_descriptor_ = file->message_type(0);
  static const int MediaAppSignalMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaAppSignalMessage, _signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaAppSignalMessage, _call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaAppSignalMessage, _base_),
  };
  MediaAppSignalMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaAppSignalMessage_descriptor_,
      MediaAppSignalMessage::default_instance_,
      MediaAppSignalMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaAppSignalMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaAppSignalMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaAppSignalMessage));
  MediaAppSignalMessage_MediaMessageBase_descriptor_ = MediaAppSignalMessage_descriptor_->nested_type(0);
  static const int MediaAppSignalMessage_MediaMessageBase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaAppSignalMessage_MediaMessageBase, _packetid_),
  };
  MediaAppSignalMessage_MediaMessageBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaAppSignalMessage_MediaMessageBase_descriptor_,
      MediaAppSignalMessage_MediaMessageBase::default_instance_,
      MediaAppSignalMessage_MediaMessageBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaAppSignalMessage_MediaMessageBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaAppSignalMessage_MediaMessageBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaAppSignalMessage_MediaMessageBase));
  MediaSignalMessage_descriptor_ = file->message_type(1);
  static const int MediaSignalMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage, _login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage, _logout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage, _statechanged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage, _ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage, _pong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage, _loginresp_),
  };
  MediaSignalMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaSignalMessage_descriptor_,
      MediaSignalMessage::default_instance_,
      MediaSignalMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaSignalMessage));
  MediaSignalMessage_Login_descriptor_ = MediaSignalMessage_descriptor_->nested_type(0);
  static const int MediaSignalMessage_Login_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_Login, _uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_Login, _pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_Login, _portal_),
  };
  MediaSignalMessage_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaSignalMessage_Login_descriptor_,
      MediaSignalMessage_Login::default_instance_,
      MediaSignalMessage_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaSignalMessage_Login));
  MediaSignalMessage_LoginResp_descriptor_ = MediaSignalMessage_descriptor_->nested_type(1);
  static const int MediaSignalMessage_LoginResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_LoginResp, _token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_LoginResp, _code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_LoginResp, _failed_reason_),
  };
  MediaSignalMessage_LoginResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaSignalMessage_LoginResp_descriptor_,
      MediaSignalMessage_LoginResp::default_instance_,
      MediaSignalMessage_LoginResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_LoginResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_LoginResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaSignalMessage_LoginResp));
  MediaSignalMessage_Logout_descriptor_ = MediaSignalMessage_descriptor_->nested_type(2);
  static const int MediaSignalMessage_Logout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_Logout, _uid_),
  };
  MediaSignalMessage_Logout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaSignalMessage_Logout_descriptor_,
      MediaSignalMessage_Logout::default_instance_,
      MediaSignalMessage_Logout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_Logout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_Logout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaSignalMessage_Logout));
  MediaSignalMessage_OnlineStateChange_descriptor_ = MediaSignalMessage_descriptor_->nested_type(3);
  static const int MediaSignalMessage_OnlineStateChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_OnlineStateChange, _uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_OnlineStateChange, _state_),
  };
  MediaSignalMessage_OnlineStateChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaSignalMessage_OnlineStateChange_descriptor_,
      MediaSignalMessage_OnlineStateChange::default_instance_,
      MediaSignalMessage_OnlineStateChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_OnlineStateChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_OnlineStateChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaSignalMessage_OnlineStateChange));
  MediaSignalMessage_ping_descriptor_ = MediaSignalMessage_descriptor_->nested_type(4);
  static const int MediaSignalMessage_ping_offsets_[1] = {
  };
  MediaSignalMessage_ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaSignalMessage_ping_descriptor_,
      MediaSignalMessage_ping::default_instance_,
      MediaSignalMessage_ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaSignalMessage_ping));
  MediaSignalMessage_pong_descriptor_ = MediaSignalMessage_descriptor_->nested_type(5);
  static const int MediaSignalMessage_pong_offsets_[1] = {
  };
  MediaSignalMessage_pong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaSignalMessage_pong_descriptor_,
      MediaSignalMessage_pong::default_instance_,
      MediaSignalMessage_pong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_pong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaSignalMessage_pong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaSignalMessage_pong));
  MediaCallMessage_descriptor_ = file->message_type(2);
  static const int MediaCallMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage, _base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage, _call_initiate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage, _call_accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage, _call_terminate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage, _call_invite_),
  };
  MediaCallMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaCallMessage_descriptor_,
      MediaCallMessage::default_instance_,
      MediaCallMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaCallMessage));
  MediaCallMessage_BaseMesssage_descriptor_ = MediaCallMessage_descriptor_->nested_type(0);
  static const int MediaCallMessage_BaseMesssage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_BaseMesssage, _from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_BaseMesssage, _to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_BaseMesssage, _portal_),
  };
  MediaCallMessage_BaseMesssage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaCallMessage_BaseMesssage_descriptor_,
      MediaCallMessage_BaseMesssage::default_instance_,
      MediaCallMessage_BaseMesssage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_BaseMesssage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_BaseMesssage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaCallMessage_BaseMesssage));
  MediaCallMessage_CallInitiate_descriptor_ = MediaCallMessage_descriptor_->nested_type(1);
  static const int MediaCallMessage_CallInitiate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallInitiate, _callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallInitiate, _caller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallInitiate, _media_session_),
  };
  MediaCallMessage_CallInitiate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaCallMessage_CallInitiate_descriptor_,
      MediaCallMessage_CallInitiate::default_instance_,
      MediaCallMessage_CallInitiate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallInitiate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallInitiate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaCallMessage_CallInitiate));
  MediaCallMessage_CallAccept_descriptor_ = MediaCallMessage_descriptor_->nested_type(2);
  static const int MediaCallMessage_CallAccept_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallAccept, _callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallAccept, _callee_),
  };
  MediaCallMessage_CallAccept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaCallMessage_CallAccept_descriptor_,
      MediaCallMessage_CallAccept::default_instance_,
      MediaCallMessage_CallAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallAccept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallAccept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaCallMessage_CallAccept));
  MediaCallMessage_CallTerminate_descriptor_ = MediaCallMessage_descriptor_->nested_type(3);
  static const int MediaCallMessage_CallTerminate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallTerminate, _callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallTerminate, _reason_),
  };
  MediaCallMessage_CallTerminate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaCallMessage_CallTerminate_descriptor_,
      MediaCallMessage_CallTerminate::default_instance_,
      MediaCallMessage_CallTerminate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallTerminate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallTerminate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaCallMessage_CallTerminate));
  MediaCallMessage_CallInvite_descriptor_ = MediaCallMessage_descriptor_->nested_type(4);
  static const int MediaCallMessage_CallInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallInvite, _callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallInvite, _media_session_),
  };
  MediaCallMessage_CallInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaCallMessage_CallInvite_descriptor_,
      MediaCallMessage_CallInvite::default_instance_,
      MediaCallMessage_CallInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCallMessage_CallInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaCallMessage_CallInvite));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mediaappsingnal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaAppSignalMessage_descriptor_, &MediaAppSignalMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaAppSignalMessage_MediaMessageBase_descriptor_, &MediaAppSignalMessage_MediaMessageBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaSignalMessage_descriptor_, &MediaSignalMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaSignalMessage_Login_descriptor_, &MediaSignalMessage_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaSignalMessage_LoginResp_descriptor_, &MediaSignalMessage_LoginResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaSignalMessage_Logout_descriptor_, &MediaSignalMessage_Logout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaSignalMessage_OnlineStateChange_descriptor_, &MediaSignalMessage_OnlineStateChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaSignalMessage_ping_descriptor_, &MediaSignalMessage_ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaSignalMessage_pong_descriptor_, &MediaSignalMessage_pong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaCallMessage_descriptor_, &MediaCallMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaCallMessage_BaseMesssage_descriptor_, &MediaCallMessage_BaseMesssage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaCallMessage_CallInitiate_descriptor_, &MediaCallMessage_CallInitiate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaCallMessage_CallAccept_descriptor_, &MediaCallMessage_CallAccept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaCallMessage_CallTerminate_descriptor_, &MediaCallMessage_CallTerminate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaCallMessage_CallInvite_descriptor_, &MediaCallMessage_CallInvite::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mediaappsingnal_2eproto() {
  delete MediaAppSignalMessage::default_instance_;
  delete MediaAppSignalMessage_reflection_;
  delete MediaAppSignalMessage_MediaMessageBase::default_instance_;
  delete MediaAppSignalMessage_MediaMessageBase_reflection_;
  delete MediaSignalMessage::default_instance_;
  delete MediaSignalMessage_reflection_;
  delete MediaSignalMessage_Login::default_instance_;
  delete MediaSignalMessage_Login_reflection_;
  delete MediaSignalMessage_LoginResp::default_instance_;
  delete MediaSignalMessage_LoginResp_reflection_;
  delete MediaSignalMessage_Logout::default_instance_;
  delete MediaSignalMessage_Logout_reflection_;
  delete MediaSignalMessage_OnlineStateChange::default_instance_;
  delete MediaSignalMessage_OnlineStateChange_reflection_;
  delete MediaSignalMessage_ping::default_instance_;
  delete MediaSignalMessage_ping_reflection_;
  delete MediaSignalMessage_pong::default_instance_;
  delete MediaSignalMessage_pong_reflection_;
  delete MediaCallMessage::default_instance_;
  delete MediaCallMessage_reflection_;
  delete MediaCallMessage_BaseMesssage::default_instance_;
  delete MediaCallMessage_BaseMesssage_reflection_;
  delete MediaCallMessage_CallInitiate::default_instance_;
  delete MediaCallMessage_CallInitiate_reflection_;
  delete MediaCallMessage_CallAccept::default_instance_;
  delete MediaCallMessage_CallAccept_reflection_;
  delete MediaCallMessage_CallTerminate::default_instance_;
  delete MediaCallMessage_CallTerminate_reflection_;
  delete MediaCallMessage_CallInvite::default_instance_;
  delete MediaCallMessage_CallInvite_reflection_;
}

void protobuf_AddDesc_mediaappsingnal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025mediaappsingnal.proto\"\276\001\n\025MediaAppSign"
    "alMessage\022$\n\007_signal\030\001 \001(\0132\023.MediaSignal"
    "Message\022 \n\005_call\030\002 \001(\0132\021.MediaCallMessag"
    "e\0226\n\005_base\030\003 \001(\0132\'.MediaAppSignalMessage"
    ".MediaMessageBase\032%\n\020MediaMessageBase\022\021\n"
    "\t_packetId\030\001 \002(\004\"\204\004\n\022MediaSignalMessage\022"
    ")\n\006_login\030\001 \001(\0132\031.MediaSignalMessage.Log"
    "in\022+\n\007_logout\030\002 \001(\0132\032.MediaSignalMessage"
    ".Logout\022<\n\r_stateChanged\030\003 \001(\0132%.MediaSi"
    "gnalMessage.OnlineStateChange\022\'\n\005_ping\030\004"
    " \001(\0132\030.MediaSignalMessage.ping\022\'\n\005_pong\030"
    "\005 \001(\0132\030.MediaSignalMessage.pong\0221\n\n_logi"
    "nResp\030\006 \001(\0132\035.MediaSignalMessage.LoginRe"
    "sp\0324\n\005Login\022\014\n\004_uid\030\001 \002(\t\022\014\n\004_pwd\030\002 \002(\t\022"
    "\017\n\007_portal\030\003 \002(\t\032B\n\tLoginResp\022\016\n\006_token\030"
    "\001 \002(\t\022\r\n\005_code\030\002 \002(\r\022\026\n\016_failed_reason\030\003"
    " \002(\t\032\026\n\006Logout\022\014\n\004_uid\030\001 \001(\t\0321\n\021OnlineSt"
    "ateChange\022\014\n\004_uid\030\001 \002(\t\022\016\n\006_state\030\002 \002(\r\032"
    "\006\n\004ping\032\006\n\004pong\"\274\004\n\020MediaCallMessage\022-\n\005"
    "_base\030\001 \002(\0132\036.MediaCallMessage.BaseMesss"
    "age\0226\n\016_call_initiate\030\002 \001(\0132\036.MediaCallM"
    "essage.CallInitiate\0222\n\014_call_accept\030\003 \001("
    "\0132\034.MediaCallMessage.CallAccept\0228\n\017_call"
    "_terminate\030\004 \001(\0132\037.MediaCallMessage.Call"
    "Terminate\0222\n\014_call_invite\030\005 \001(\0132\034.MediaC"
    "allMessage.CallInvite\032;\n\014BaseMesssage\022\r\n"
    "\005_from\030\001 \002(\t\022\013\n\003_to\030\002 \002(\t\022\017\n\007_portal\030\003 \002"
    "(\t\032H\n\014CallInitiate\022\017\n\007_callid\030\001 \002(\t\022\017\n\007_"
    "caller\030\002 \002(\t\022\026\n\016_media_session\030\003 \002(\t\032.\n\n"
    "CallAccept\022\017\n\007_callid\030\001 \002(\t\022\017\n\007_callee\030\002"
    " \002(\t\0321\n\rCallTerminate\022\017\n\007_callid\030\001 \002(\t\022\017"
    "\n\007_reason\030\002 \002(\r\0325\n\nCallInvite\022\017\n\007_callid"
    "\030\001 \002(\t\022\026\n\016_media_session\030\002 \002(\t", 1310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mediaappsingnal.proto", &protobuf_RegisterTypes);
  MediaAppSignalMessage::default_instance_ = new MediaAppSignalMessage();
  MediaAppSignalMessage_MediaMessageBase::default_instance_ = new MediaAppSignalMessage_MediaMessageBase();
  MediaSignalMessage::default_instance_ = new MediaSignalMessage();
  MediaSignalMessage_Login::default_instance_ = new MediaSignalMessage_Login();
  MediaSignalMessage_LoginResp::default_instance_ = new MediaSignalMessage_LoginResp();
  MediaSignalMessage_Logout::default_instance_ = new MediaSignalMessage_Logout();
  MediaSignalMessage_OnlineStateChange::default_instance_ = new MediaSignalMessage_OnlineStateChange();
  MediaSignalMessage_ping::default_instance_ = new MediaSignalMessage_ping();
  MediaSignalMessage_pong::default_instance_ = new MediaSignalMessage_pong();
  MediaCallMessage::default_instance_ = new MediaCallMessage();
  MediaCallMessage_BaseMesssage::default_instance_ = new MediaCallMessage_BaseMesssage();
  MediaCallMessage_CallInitiate::default_instance_ = new MediaCallMessage_CallInitiate();
  MediaCallMessage_CallAccept::default_instance_ = new MediaCallMessage_CallAccept();
  MediaCallMessage_CallTerminate::default_instance_ = new MediaCallMessage_CallTerminate();
  MediaCallMessage_CallInvite::default_instance_ = new MediaCallMessage_CallInvite();
  MediaAppSignalMessage::default_instance_->InitAsDefaultInstance();
  MediaAppSignalMessage_MediaMessageBase::default_instance_->InitAsDefaultInstance();
  MediaSignalMessage::default_instance_->InitAsDefaultInstance();
  MediaSignalMessage_Login::default_instance_->InitAsDefaultInstance();
  MediaSignalMessage_LoginResp::default_instance_->InitAsDefaultInstance();
  MediaSignalMessage_Logout::default_instance_->InitAsDefaultInstance();
  MediaSignalMessage_OnlineStateChange::default_instance_->InitAsDefaultInstance();
  MediaSignalMessage_ping::default_instance_->InitAsDefaultInstance();
  MediaSignalMessage_pong::default_instance_->InitAsDefaultInstance();
  MediaCallMessage::default_instance_->InitAsDefaultInstance();
  MediaCallMessage_BaseMesssage::default_instance_->InitAsDefaultInstance();
  MediaCallMessage_CallInitiate::default_instance_->InitAsDefaultInstance();
  MediaCallMessage_CallAccept::default_instance_->InitAsDefaultInstance();
  MediaCallMessage_CallTerminate::default_instance_->InitAsDefaultInstance();
  MediaCallMessage_CallInvite::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mediaappsingnal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mediaappsingnal_2eproto {
  StaticDescriptorInitializer_mediaappsingnal_2eproto() {
    protobuf_AddDesc_mediaappsingnal_2eproto();
  }
} static_descriptor_initializer_mediaappsingnal_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MediaAppSignalMessage_MediaMessageBase::kPacketIdFieldNumber;
#endif  // !_MSC_VER

MediaAppSignalMessage_MediaMessageBase::MediaAppSignalMessage_MediaMessageBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaAppSignalMessage_MediaMessageBase::InitAsDefaultInstance() {
}

MediaAppSignalMessage_MediaMessageBase::MediaAppSignalMessage_MediaMessageBase(const MediaAppSignalMessage_MediaMessageBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaAppSignalMessage_MediaMessageBase::SharedCtor() {
  _cached_size_ = 0;
  _packetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaAppSignalMessage_MediaMessageBase::~MediaAppSignalMessage_MediaMessageBase() {
  SharedDtor();
}

void MediaAppSignalMessage_MediaMessageBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MediaAppSignalMessage_MediaMessageBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaAppSignalMessage_MediaMessageBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaAppSignalMessage_MediaMessageBase_descriptor_;
}

const MediaAppSignalMessage_MediaMessageBase& MediaAppSignalMessage_MediaMessageBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaAppSignalMessage_MediaMessageBase* MediaAppSignalMessage_MediaMessageBase::default_instance_ = NULL;

MediaAppSignalMessage_MediaMessageBase* MediaAppSignalMessage_MediaMessageBase::New() const {
  return new MediaAppSignalMessage_MediaMessageBase;
}

void MediaAppSignalMessage_MediaMessageBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _packetid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaAppSignalMessage_MediaMessageBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 _packetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &_packetid_)));
          set_has__packetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaAppSignalMessage_MediaMessageBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 _packetId = 1;
  if (has__packetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->_packetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaAppSignalMessage_MediaMessageBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 _packetId = 1;
  if (has__packetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->_packetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaAppSignalMessage_MediaMessageBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 _packetId = 1;
    if (has__packetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->_packetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaAppSignalMessage_MediaMessageBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaAppSignalMessage_MediaMessageBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaAppSignalMessage_MediaMessageBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaAppSignalMessage_MediaMessageBase::MergeFrom(const MediaAppSignalMessage_MediaMessageBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__packetid()) {
      set__packetid(from._packetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaAppSignalMessage_MediaMessageBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaAppSignalMessage_MediaMessageBase::CopyFrom(const MediaAppSignalMessage_MediaMessageBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaAppSignalMessage_MediaMessageBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MediaAppSignalMessage_MediaMessageBase::Swap(MediaAppSignalMessage_MediaMessageBase* other) {
  if (other != this) {
    std::swap(_packetid_, other->_packetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaAppSignalMessage_MediaMessageBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaAppSignalMessage_MediaMessageBase_descriptor_;
  metadata.reflection = MediaAppSignalMessage_MediaMessageBase_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaAppSignalMessage::kSignalFieldNumber;
const int MediaAppSignalMessage::kCallFieldNumber;
const int MediaAppSignalMessage::kBaseFieldNumber;
#endif  // !_MSC_VER

MediaAppSignalMessage::MediaAppSignalMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaAppSignalMessage::InitAsDefaultInstance() {
  _signal_ = const_cast< ::MediaSignalMessage*>(&::MediaSignalMessage::default_instance());
  _call_ = const_cast< ::MediaCallMessage*>(&::MediaCallMessage::default_instance());
  _base_ = const_cast< ::MediaAppSignalMessage_MediaMessageBase*>(&::MediaAppSignalMessage_MediaMessageBase::default_instance());
}

MediaAppSignalMessage::MediaAppSignalMessage(const MediaAppSignalMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaAppSignalMessage::SharedCtor() {
  _cached_size_ = 0;
  _signal_ = NULL;
  _call_ = NULL;
  _base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaAppSignalMessage::~MediaAppSignalMessage() {
  SharedDtor();
}

void MediaAppSignalMessage::SharedDtor() {
  if (this != default_instance_) {
    delete _signal_;
    delete _call_;
    delete _base_;
  }
}

void MediaAppSignalMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaAppSignalMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaAppSignalMessage_descriptor_;
}

const MediaAppSignalMessage& MediaAppSignalMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaAppSignalMessage* MediaAppSignalMessage::default_instance_ = NULL;

MediaAppSignalMessage* MediaAppSignalMessage::New() const {
  return new MediaAppSignalMessage;
}

void MediaAppSignalMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__signal()) {
      if (_signal_ != NULL) _signal_->::MediaSignalMessage::Clear();
    }
    if (has__call()) {
      if (_call_ != NULL) _call_->::MediaCallMessage::Clear();
    }
    if (has__base()) {
      if (_base_ != NULL) _base_->::MediaAppSignalMessage_MediaMessageBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaAppSignalMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MediaSignalMessage _signal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__signal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__call;
        break;
      }

      // optional .MediaCallMessage _call = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__call()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__base;
        break;
      }

      // optional .MediaAppSignalMessage.MediaMessageBase _base = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaAppSignalMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MediaSignalMessage _signal = 1;
  if (has__signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_signal(), output);
  }

  // optional .MediaCallMessage _call = 2;
  if (has__call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_call(), output);
  }

  // optional .MediaAppSignalMessage.MediaMessageBase _base = 3;
  if (has__base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaAppSignalMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MediaSignalMessage _signal = 1;
  if (has__signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_signal(), target);
  }

  // optional .MediaCallMessage _call = 2;
  if (has__call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_call(), target);
  }

  // optional .MediaAppSignalMessage.MediaMessageBase _base = 3;
  if (has__base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaAppSignalMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MediaSignalMessage _signal = 1;
    if (has__signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_signal());
    }

    // optional .MediaCallMessage _call = 2;
    if (has__call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_call());
    }

    // optional .MediaAppSignalMessage.MediaMessageBase _base = 3;
    if (has__base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaAppSignalMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaAppSignalMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaAppSignalMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaAppSignalMessage::MergeFrom(const MediaAppSignalMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__signal()) {
      mutable__signal()->::MediaSignalMessage::MergeFrom(from._signal());
    }
    if (from.has__call()) {
      mutable__call()->::MediaCallMessage::MergeFrom(from._call());
    }
    if (from.has__base()) {
      mutable__base()->::MediaAppSignalMessage_MediaMessageBase::MergeFrom(from._base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaAppSignalMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaAppSignalMessage::CopyFrom(const MediaAppSignalMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaAppSignalMessage::IsInitialized() const {

  if (has__signal()) {
    if (!this->_signal().IsInitialized()) return false;
  }
  if (has__call()) {
    if (!this->_call().IsInitialized()) return false;
  }
  if (has__base()) {
    if (!this->_base().IsInitialized()) return false;
  }
  return true;
}

void MediaAppSignalMessage::Swap(MediaAppSignalMessage* other) {
  if (other != this) {
    std::swap(_signal_, other->_signal_);
    std::swap(_call_, other->_call_);
    std::swap(_base_, other->_base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaAppSignalMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaAppSignalMessage_descriptor_;
  metadata.reflection = MediaAppSignalMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaSignalMessage_Login::kUidFieldNumber;
const int MediaSignalMessage_Login::kPwdFieldNumber;
const int MediaSignalMessage_Login::kPortalFieldNumber;
#endif  // !_MSC_VER

MediaSignalMessage_Login::MediaSignalMessage_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaSignalMessage_Login::InitAsDefaultInstance() {
}

MediaSignalMessage_Login::MediaSignalMessage_Login(const MediaSignalMessage_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaSignalMessage_Login::SharedCtor() {
  _cached_size_ = 0;
  _uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _portal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaSignalMessage_Login::~MediaSignalMessage_Login() {
  SharedDtor();
}

void MediaSignalMessage_Login::SharedDtor() {
  if (_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete _uid_;
  }
  if (_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete _pwd_;
  }
  if (_portal_ != &::google::protobuf::internal::kEmptyString) {
    delete _portal_;
  }
  if (this != default_instance_) {
  }
}

void MediaSignalMessage_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaSignalMessage_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaSignalMessage_Login_descriptor_;
}

const MediaSignalMessage_Login& MediaSignalMessage_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaSignalMessage_Login* MediaSignalMessage_Login::default_instance_ = NULL;

MediaSignalMessage_Login* MediaSignalMessage_Login::New() const {
  return new MediaSignalMessage_Login;
}

void MediaSignalMessage_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__uid()) {
      if (_uid_ != &::google::protobuf::internal::kEmptyString) {
        _uid_->clear();
      }
    }
    if (has__pwd()) {
      if (_pwd_ != &::google::protobuf::internal::kEmptyString) {
        _pwd_->clear();
      }
    }
    if (has__portal()) {
      if (_portal_ != &::google::protobuf::internal::kEmptyString) {
        _portal_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaSignalMessage_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_uid().data(), this->_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__pwd;
        break;
      }

      // required string _pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_pwd().data(), this->_pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__portal;
        break;
      }

      // required string _portal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__portal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__portal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_portal().data(), this->_portal().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaSignalMessage_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_uid().data(), this->_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_uid(), output);
  }

  // required string _pwd = 2;
  if (has__pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_pwd().data(), this->_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->_pwd(), output);
  }

  // required string _portal = 3;
  if (has__portal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_portal().data(), this->_portal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->_portal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaSignalMessage_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_uid().data(), this->_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_uid(), target);
  }

  // required string _pwd = 2;
  if (has__pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_pwd().data(), this->_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_pwd(), target);
  }

  // required string _portal = 3;
  if (has__portal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_portal().data(), this->_portal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_portal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaSignalMessage_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_uid());
    }

    // required string _pwd = 2;
    if (has__pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_pwd());
    }

    // required string _portal = 3;
    if (has__portal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_portal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaSignalMessage_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaSignalMessage_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaSignalMessage_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaSignalMessage_Login::MergeFrom(const MediaSignalMessage_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
    if (from.has__pwd()) {
      set__pwd(from._pwd());
    }
    if (from.has__portal()) {
      set__portal(from._portal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaSignalMessage_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaSignalMessage_Login::CopyFrom(const MediaSignalMessage_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaSignalMessage_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MediaSignalMessage_Login::Swap(MediaSignalMessage_Login* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_pwd_, other->_pwd_);
    std::swap(_portal_, other->_portal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaSignalMessage_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaSignalMessage_Login_descriptor_;
  metadata.reflection = MediaSignalMessage_Login_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaSignalMessage_LoginResp::kTokenFieldNumber;
const int MediaSignalMessage_LoginResp::kCodeFieldNumber;
const int MediaSignalMessage_LoginResp::kFailedReasonFieldNumber;
#endif  // !_MSC_VER

MediaSignalMessage_LoginResp::MediaSignalMessage_LoginResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaSignalMessage_LoginResp::InitAsDefaultInstance() {
}

MediaSignalMessage_LoginResp::MediaSignalMessage_LoginResp(const MediaSignalMessage_LoginResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaSignalMessage_LoginResp::SharedCtor() {
  _cached_size_ = 0;
  _token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _code_ = 0u;
  _failed_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaSignalMessage_LoginResp::~MediaSignalMessage_LoginResp() {
  SharedDtor();
}

void MediaSignalMessage_LoginResp::SharedDtor() {
  if (_token_ != &::google::protobuf::internal::kEmptyString) {
    delete _token_;
  }
  if (_failed_reason_ != &::google::protobuf::internal::kEmptyString) {
    delete _failed_reason_;
  }
  if (this != default_instance_) {
  }
}

void MediaSignalMessage_LoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaSignalMessage_LoginResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaSignalMessage_LoginResp_descriptor_;
}

const MediaSignalMessage_LoginResp& MediaSignalMessage_LoginResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaSignalMessage_LoginResp* MediaSignalMessage_LoginResp::default_instance_ = NULL;

MediaSignalMessage_LoginResp* MediaSignalMessage_LoginResp::New() const {
  return new MediaSignalMessage_LoginResp;
}

void MediaSignalMessage_LoginResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__token()) {
      if (_token_ != &::google::protobuf::internal::kEmptyString) {
        _token_->clear();
      }
    }
    _code_ = 0u;
    if (has__failed_reason()) {
      if (_failed_reason_ != &::google::protobuf::internal::kEmptyString) {
        _failed_reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaSignalMessage_LoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_token().data(), this->_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__code;
        break;
      }

      // required uint32 _code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_code_)));
          set_has__code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__failed_reason;
        break;
      }

      // required string _failed_reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__failed_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__failed_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_failed_reason().data(), this->_failed_reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaSignalMessage_LoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _token = 1;
  if (has__token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_token().data(), this->_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_token(), output);
  }

  // required uint32 _code = 2;
  if (has__code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_code(), output);
  }

  // required string _failed_reason = 3;
  if (has__failed_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_failed_reason().data(), this->_failed_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->_failed_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaSignalMessage_LoginResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _token = 1;
  if (has__token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_token().data(), this->_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_token(), target);
  }

  // required uint32 _code = 2;
  if (has__code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_code(), target);
  }

  // required string _failed_reason = 3;
  if (has__failed_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_failed_reason().data(), this->_failed_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_failed_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaSignalMessage_LoginResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _token = 1;
    if (has__token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_token());
    }

    // required uint32 _code = 2;
    if (has__code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_code());
    }

    // required string _failed_reason = 3;
    if (has__failed_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_failed_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaSignalMessage_LoginResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaSignalMessage_LoginResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaSignalMessage_LoginResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaSignalMessage_LoginResp::MergeFrom(const MediaSignalMessage_LoginResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__token()) {
      set__token(from._token());
    }
    if (from.has__code()) {
      set__code(from._code());
    }
    if (from.has__failed_reason()) {
      set__failed_reason(from._failed_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaSignalMessage_LoginResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaSignalMessage_LoginResp::CopyFrom(const MediaSignalMessage_LoginResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaSignalMessage_LoginResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MediaSignalMessage_LoginResp::Swap(MediaSignalMessage_LoginResp* other) {
  if (other != this) {
    std::swap(_token_, other->_token_);
    std::swap(_code_, other->_code_);
    std::swap(_failed_reason_, other->_failed_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaSignalMessage_LoginResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaSignalMessage_LoginResp_descriptor_;
  metadata.reflection = MediaSignalMessage_LoginResp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaSignalMessage_Logout::kUidFieldNumber;
#endif  // !_MSC_VER

MediaSignalMessage_Logout::MediaSignalMessage_Logout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaSignalMessage_Logout::InitAsDefaultInstance() {
}

MediaSignalMessage_Logout::MediaSignalMessage_Logout(const MediaSignalMessage_Logout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaSignalMessage_Logout::SharedCtor() {
  _cached_size_ = 0;
  _uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaSignalMessage_Logout::~MediaSignalMessage_Logout() {
  SharedDtor();
}

void MediaSignalMessage_Logout::SharedDtor() {
  if (_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete _uid_;
  }
  if (this != default_instance_) {
  }
}

void MediaSignalMessage_Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaSignalMessage_Logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaSignalMessage_Logout_descriptor_;
}

const MediaSignalMessage_Logout& MediaSignalMessage_Logout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaSignalMessage_Logout* MediaSignalMessage_Logout::default_instance_ = NULL;

MediaSignalMessage_Logout* MediaSignalMessage_Logout::New() const {
  return new MediaSignalMessage_Logout;
}

void MediaSignalMessage_Logout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__uid()) {
      if (_uid_ != &::google::protobuf::internal::kEmptyString) {
        _uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaSignalMessage_Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string _uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_uid().data(), this->_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaSignalMessage_Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_uid().data(), this->_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaSignalMessage_Logout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_uid().data(), this->_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaSignalMessage_Logout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaSignalMessage_Logout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaSignalMessage_Logout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaSignalMessage_Logout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaSignalMessage_Logout::MergeFrom(const MediaSignalMessage_Logout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaSignalMessage_Logout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaSignalMessage_Logout::CopyFrom(const MediaSignalMessage_Logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaSignalMessage_Logout::IsInitialized() const {

  return true;
}

void MediaSignalMessage_Logout::Swap(MediaSignalMessage_Logout* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaSignalMessage_Logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaSignalMessage_Logout_descriptor_;
  metadata.reflection = MediaSignalMessage_Logout_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaSignalMessage_OnlineStateChange::kUidFieldNumber;
const int MediaSignalMessage_OnlineStateChange::kStateFieldNumber;
#endif  // !_MSC_VER

MediaSignalMessage_OnlineStateChange::MediaSignalMessage_OnlineStateChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaSignalMessage_OnlineStateChange::InitAsDefaultInstance() {
}

MediaSignalMessage_OnlineStateChange::MediaSignalMessage_OnlineStateChange(const MediaSignalMessage_OnlineStateChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaSignalMessage_OnlineStateChange::SharedCtor() {
  _cached_size_ = 0;
  _uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaSignalMessage_OnlineStateChange::~MediaSignalMessage_OnlineStateChange() {
  SharedDtor();
}

void MediaSignalMessage_OnlineStateChange::SharedDtor() {
  if (_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete _uid_;
  }
  if (this != default_instance_) {
  }
}

void MediaSignalMessage_OnlineStateChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaSignalMessage_OnlineStateChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaSignalMessage_OnlineStateChange_descriptor_;
}

const MediaSignalMessage_OnlineStateChange& MediaSignalMessage_OnlineStateChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaSignalMessage_OnlineStateChange* MediaSignalMessage_OnlineStateChange::default_instance_ = NULL;

MediaSignalMessage_OnlineStateChange* MediaSignalMessage_OnlineStateChange::New() const {
  return new MediaSignalMessage_OnlineStateChange;
}

void MediaSignalMessage_OnlineStateChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__uid()) {
      if (_uid_ != &::google::protobuf::internal::kEmptyString) {
        _uid_->clear();
      }
    }
    _state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaSignalMessage_OnlineStateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_uid().data(), this->_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__state;
        break;
      }

      // required uint32 _state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_state_)));
          set_has__state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaSignalMessage_OnlineStateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_uid().data(), this->_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_uid(), output);
  }

  // required uint32 _state = 2;
  if (has__state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaSignalMessage_OnlineStateChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_uid().data(), this->_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_uid(), target);
  }

  // required uint32 _state = 2;
  if (has__state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaSignalMessage_OnlineStateChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_uid());
    }

    // required uint32 _state = 2;
    if (has__state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaSignalMessage_OnlineStateChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaSignalMessage_OnlineStateChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaSignalMessage_OnlineStateChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaSignalMessage_OnlineStateChange::MergeFrom(const MediaSignalMessage_OnlineStateChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
    if (from.has__state()) {
      set__state(from._state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaSignalMessage_OnlineStateChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaSignalMessage_OnlineStateChange::CopyFrom(const MediaSignalMessage_OnlineStateChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaSignalMessage_OnlineStateChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MediaSignalMessage_OnlineStateChange::Swap(MediaSignalMessage_OnlineStateChange* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_state_, other->_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaSignalMessage_OnlineStateChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaSignalMessage_OnlineStateChange_descriptor_;
  metadata.reflection = MediaSignalMessage_OnlineStateChange_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

MediaSignalMessage_ping::MediaSignalMessage_ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaSignalMessage_ping::InitAsDefaultInstance() {
}

MediaSignalMessage_ping::MediaSignalMessage_ping(const MediaSignalMessage_ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaSignalMessage_ping::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaSignalMessage_ping::~MediaSignalMessage_ping() {
  SharedDtor();
}

void MediaSignalMessage_ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MediaSignalMessage_ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaSignalMessage_ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaSignalMessage_ping_descriptor_;
}

const MediaSignalMessage_ping& MediaSignalMessage_ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaSignalMessage_ping* MediaSignalMessage_ping::default_instance_ = NULL;

MediaSignalMessage_ping* MediaSignalMessage_ping::New() const {
  return new MediaSignalMessage_ping;
}

void MediaSignalMessage_ping::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaSignalMessage_ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MediaSignalMessage_ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaSignalMessage_ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaSignalMessage_ping::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaSignalMessage_ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaSignalMessage_ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaSignalMessage_ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaSignalMessage_ping::MergeFrom(const MediaSignalMessage_ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaSignalMessage_ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaSignalMessage_ping::CopyFrom(const MediaSignalMessage_ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaSignalMessage_ping::IsInitialized() const {

  return true;
}

void MediaSignalMessage_ping::Swap(MediaSignalMessage_ping* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaSignalMessage_ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaSignalMessage_ping_descriptor_;
  metadata.reflection = MediaSignalMessage_ping_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

MediaSignalMessage_pong::MediaSignalMessage_pong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaSignalMessage_pong::InitAsDefaultInstance() {
}

MediaSignalMessage_pong::MediaSignalMessage_pong(const MediaSignalMessage_pong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaSignalMessage_pong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaSignalMessage_pong::~MediaSignalMessage_pong() {
  SharedDtor();
}

void MediaSignalMessage_pong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MediaSignalMessage_pong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaSignalMessage_pong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaSignalMessage_pong_descriptor_;
}

const MediaSignalMessage_pong& MediaSignalMessage_pong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaSignalMessage_pong* MediaSignalMessage_pong::default_instance_ = NULL;

MediaSignalMessage_pong* MediaSignalMessage_pong::New() const {
  return new MediaSignalMessage_pong;
}

void MediaSignalMessage_pong::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaSignalMessage_pong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MediaSignalMessage_pong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaSignalMessage_pong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaSignalMessage_pong::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaSignalMessage_pong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaSignalMessage_pong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaSignalMessage_pong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaSignalMessage_pong::MergeFrom(const MediaSignalMessage_pong& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaSignalMessage_pong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaSignalMessage_pong::CopyFrom(const MediaSignalMessage_pong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaSignalMessage_pong::IsInitialized() const {

  return true;
}

void MediaSignalMessage_pong::Swap(MediaSignalMessage_pong* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaSignalMessage_pong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaSignalMessage_pong_descriptor_;
  metadata.reflection = MediaSignalMessage_pong_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaSignalMessage::kLoginFieldNumber;
const int MediaSignalMessage::kLogoutFieldNumber;
const int MediaSignalMessage::kStateChangedFieldNumber;
const int MediaSignalMessage::kPingFieldNumber;
const int MediaSignalMessage::kPongFieldNumber;
const int MediaSignalMessage::kLoginRespFieldNumber;
#endif  // !_MSC_VER

MediaSignalMessage::MediaSignalMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaSignalMessage::InitAsDefaultInstance() {
  _login_ = const_cast< ::MediaSignalMessage_Login*>(&::MediaSignalMessage_Login::default_instance());
  _logout_ = const_cast< ::MediaSignalMessage_Logout*>(&::MediaSignalMessage_Logout::default_instance());
  _statechanged_ = const_cast< ::MediaSignalMessage_OnlineStateChange*>(&::MediaSignalMessage_OnlineStateChange::default_instance());
  _ping_ = const_cast< ::MediaSignalMessage_ping*>(&::MediaSignalMessage_ping::default_instance());
  _pong_ = const_cast< ::MediaSignalMessage_pong*>(&::MediaSignalMessage_pong::default_instance());
  _loginresp_ = const_cast< ::MediaSignalMessage_LoginResp*>(&::MediaSignalMessage_LoginResp::default_instance());
}

MediaSignalMessage::MediaSignalMessage(const MediaSignalMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaSignalMessage::SharedCtor() {
  _cached_size_ = 0;
  _login_ = NULL;
  _logout_ = NULL;
  _statechanged_ = NULL;
  _ping_ = NULL;
  _pong_ = NULL;
  _loginresp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaSignalMessage::~MediaSignalMessage() {
  SharedDtor();
}

void MediaSignalMessage::SharedDtor() {
  if (this != default_instance_) {
    delete _login_;
    delete _logout_;
    delete _statechanged_;
    delete _ping_;
    delete _pong_;
    delete _loginresp_;
  }
}

void MediaSignalMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaSignalMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaSignalMessage_descriptor_;
}

const MediaSignalMessage& MediaSignalMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaSignalMessage* MediaSignalMessage::default_instance_ = NULL;

MediaSignalMessage* MediaSignalMessage::New() const {
  return new MediaSignalMessage;
}

void MediaSignalMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__login()) {
      if (_login_ != NULL) _login_->::MediaSignalMessage_Login::Clear();
    }
    if (has__logout()) {
      if (_logout_ != NULL) _logout_->::MediaSignalMessage_Logout::Clear();
    }
    if (has__statechanged()) {
      if (_statechanged_ != NULL) _statechanged_->::MediaSignalMessage_OnlineStateChange::Clear();
    }
    if (has__ping()) {
      if (_ping_ != NULL) _ping_->::MediaSignalMessage_ping::Clear();
    }
    if (has__pong()) {
      if (_pong_ != NULL) _pong_->::MediaSignalMessage_pong::Clear();
    }
    if (has__loginresp()) {
      if (_loginresp_ != NULL) _loginresp_->::MediaSignalMessage_LoginResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaSignalMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MediaSignalMessage.Login _login = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__logout;
        break;
      }

      // optional .MediaSignalMessage.Logout _logout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__logout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__logout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__stateChanged;
        break;
      }

      // optional .MediaSignalMessage.OnlineStateChange _stateChanged = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__stateChanged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__statechanged()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__ping;
        break;
      }

      // optional .MediaSignalMessage.ping _ping = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__ping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__pong;
        break;
      }

      // optional .MediaSignalMessage.pong _pong = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__pong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__pong()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse__loginResp;
        break;
      }

      // optional .MediaSignalMessage.LoginResp _loginResp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__loginResp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__loginresp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaSignalMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MediaSignalMessage.Login _login = 1;
  if (has__login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_login(), output);
  }

  // optional .MediaSignalMessage.Logout _logout = 2;
  if (has__logout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_logout(), output);
  }

  // optional .MediaSignalMessage.OnlineStateChange _stateChanged = 3;
  if (has__statechanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_statechanged(), output);
  }

  // optional .MediaSignalMessage.ping _ping = 4;
  if (has__ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_ping(), output);
  }

  // optional .MediaSignalMessage.pong _pong = 5;
  if (has__pong()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_pong(), output);
  }

  // optional .MediaSignalMessage.LoginResp _loginResp = 6;
  if (has__loginresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_loginresp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaSignalMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MediaSignalMessage.Login _login = 1;
  if (has__login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_login(), target);
  }

  // optional .MediaSignalMessage.Logout _logout = 2;
  if (has__logout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_logout(), target);
  }

  // optional .MediaSignalMessage.OnlineStateChange _stateChanged = 3;
  if (has__statechanged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_statechanged(), target);
  }

  // optional .MediaSignalMessage.ping _ping = 4;
  if (has__ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_ping(), target);
  }

  // optional .MediaSignalMessage.pong _pong = 5;
  if (has__pong()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_pong(), target);
  }

  // optional .MediaSignalMessage.LoginResp _loginResp = 6;
  if (has__loginresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_loginresp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaSignalMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MediaSignalMessage.Login _login = 1;
    if (has__login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_login());
    }

    // optional .MediaSignalMessage.Logout _logout = 2;
    if (has__logout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_logout());
    }

    // optional .MediaSignalMessage.OnlineStateChange _stateChanged = 3;
    if (has__statechanged()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_statechanged());
    }

    // optional .MediaSignalMessage.ping _ping = 4;
    if (has__ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_ping());
    }

    // optional .MediaSignalMessage.pong _pong = 5;
    if (has__pong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_pong());
    }

    // optional .MediaSignalMessage.LoginResp _loginResp = 6;
    if (has__loginresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_loginresp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaSignalMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaSignalMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaSignalMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaSignalMessage::MergeFrom(const MediaSignalMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__login()) {
      mutable__login()->::MediaSignalMessage_Login::MergeFrom(from._login());
    }
    if (from.has__logout()) {
      mutable__logout()->::MediaSignalMessage_Logout::MergeFrom(from._logout());
    }
    if (from.has__statechanged()) {
      mutable__statechanged()->::MediaSignalMessage_OnlineStateChange::MergeFrom(from._statechanged());
    }
    if (from.has__ping()) {
      mutable__ping()->::MediaSignalMessage_ping::MergeFrom(from._ping());
    }
    if (from.has__pong()) {
      mutable__pong()->::MediaSignalMessage_pong::MergeFrom(from._pong());
    }
    if (from.has__loginresp()) {
      mutable__loginresp()->::MediaSignalMessage_LoginResp::MergeFrom(from._loginresp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaSignalMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaSignalMessage::CopyFrom(const MediaSignalMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaSignalMessage::IsInitialized() const {

  if (has__login()) {
    if (!this->_login().IsInitialized()) return false;
  }
  if (has__statechanged()) {
    if (!this->_statechanged().IsInitialized()) return false;
  }
  if (has__loginresp()) {
    if (!this->_loginresp().IsInitialized()) return false;
  }
  return true;
}

void MediaSignalMessage::Swap(MediaSignalMessage* other) {
  if (other != this) {
    std::swap(_login_, other->_login_);
    std::swap(_logout_, other->_logout_);
    std::swap(_statechanged_, other->_statechanged_);
    std::swap(_ping_, other->_ping_);
    std::swap(_pong_, other->_pong_);
    std::swap(_loginresp_, other->_loginresp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaSignalMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaSignalMessage_descriptor_;
  metadata.reflection = MediaSignalMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaCallMessage_BaseMesssage::kFromFieldNumber;
const int MediaCallMessage_BaseMesssage::kToFieldNumber;
const int MediaCallMessage_BaseMesssage::kPortalFieldNumber;
#endif  // !_MSC_VER

MediaCallMessage_BaseMesssage::MediaCallMessage_BaseMesssage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaCallMessage_BaseMesssage::InitAsDefaultInstance() {
}

MediaCallMessage_BaseMesssage::MediaCallMessage_BaseMesssage(const MediaCallMessage_BaseMesssage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaCallMessage_BaseMesssage::SharedCtor() {
  _cached_size_ = 0;
  _from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _portal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaCallMessage_BaseMesssage::~MediaCallMessage_BaseMesssage() {
  SharedDtor();
}

void MediaCallMessage_BaseMesssage::SharedDtor() {
  if (_from_ != &::google::protobuf::internal::kEmptyString) {
    delete _from_;
  }
  if (_to_ != &::google::protobuf::internal::kEmptyString) {
    delete _to_;
  }
  if (_portal_ != &::google::protobuf::internal::kEmptyString) {
    delete _portal_;
  }
  if (this != default_instance_) {
  }
}

void MediaCallMessage_BaseMesssage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaCallMessage_BaseMesssage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaCallMessage_BaseMesssage_descriptor_;
}

const MediaCallMessage_BaseMesssage& MediaCallMessage_BaseMesssage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaCallMessage_BaseMesssage* MediaCallMessage_BaseMesssage::default_instance_ = NULL;

MediaCallMessage_BaseMesssage* MediaCallMessage_BaseMesssage::New() const {
  return new MediaCallMessage_BaseMesssage;
}

void MediaCallMessage_BaseMesssage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__from()) {
      if (_from_ != &::google::protobuf::internal::kEmptyString) {
        _from_->clear();
      }
    }
    if (has__to()) {
      if (_to_ != &::google::protobuf::internal::kEmptyString) {
        _to_->clear();
      }
    }
    if (has__portal()) {
      if (_portal_ != &::google::protobuf::internal::kEmptyString) {
        _portal_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaCallMessage_BaseMesssage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_from().data(), this->_from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__to;
        break;
      }

      // required string _to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_to().data(), this->_to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__portal;
        break;
      }

      // required string _portal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__portal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__portal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_portal().data(), this->_portal().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaCallMessage_BaseMesssage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _from = 1;
  if (has__from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_from().data(), this->_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_from(), output);
  }

  // required string _to = 2;
  if (has__to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_to().data(), this->_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->_to(), output);
  }

  // required string _portal = 3;
  if (has__portal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_portal().data(), this->_portal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->_portal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaCallMessage_BaseMesssage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _from = 1;
  if (has__from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_from().data(), this->_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_from(), target);
  }

  // required string _to = 2;
  if (has__to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_to().data(), this->_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_to(), target);
  }

  // required string _portal = 3;
  if (has__portal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_portal().data(), this->_portal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_portal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaCallMessage_BaseMesssage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _from = 1;
    if (has__from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_from());
    }

    // required string _to = 2;
    if (has__to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_to());
    }

    // required string _portal = 3;
    if (has__portal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_portal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaCallMessage_BaseMesssage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaCallMessage_BaseMesssage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaCallMessage_BaseMesssage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaCallMessage_BaseMesssage::MergeFrom(const MediaCallMessage_BaseMesssage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__from()) {
      set__from(from._from());
    }
    if (from.has__to()) {
      set__to(from._to());
    }
    if (from.has__portal()) {
      set__portal(from._portal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaCallMessage_BaseMesssage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaCallMessage_BaseMesssage::CopyFrom(const MediaCallMessage_BaseMesssage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaCallMessage_BaseMesssage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MediaCallMessage_BaseMesssage::Swap(MediaCallMessage_BaseMesssage* other) {
  if (other != this) {
    std::swap(_from_, other->_from_);
    std::swap(_to_, other->_to_);
    std::swap(_portal_, other->_portal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaCallMessage_BaseMesssage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaCallMessage_BaseMesssage_descriptor_;
  metadata.reflection = MediaCallMessage_BaseMesssage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaCallMessage_CallInitiate::kCallidFieldNumber;
const int MediaCallMessage_CallInitiate::kCallerFieldNumber;
const int MediaCallMessage_CallInitiate::kMediaSessionFieldNumber;
#endif  // !_MSC_VER

MediaCallMessage_CallInitiate::MediaCallMessage_CallInitiate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaCallMessage_CallInitiate::InitAsDefaultInstance() {
}

MediaCallMessage_CallInitiate::MediaCallMessage_CallInitiate(const MediaCallMessage_CallInitiate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaCallMessage_CallInitiate::SharedCtor() {
  _cached_size_ = 0;
  _callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _media_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaCallMessage_CallInitiate::~MediaCallMessage_CallInitiate() {
  SharedDtor();
}

void MediaCallMessage_CallInitiate::SharedDtor() {
  if (_callid_ != &::google::protobuf::internal::kEmptyString) {
    delete _callid_;
  }
  if (_caller_ != &::google::protobuf::internal::kEmptyString) {
    delete _caller_;
  }
  if (_media_session_ != &::google::protobuf::internal::kEmptyString) {
    delete _media_session_;
  }
  if (this != default_instance_) {
  }
}

void MediaCallMessage_CallInitiate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaCallMessage_CallInitiate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaCallMessage_CallInitiate_descriptor_;
}

const MediaCallMessage_CallInitiate& MediaCallMessage_CallInitiate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaCallMessage_CallInitiate* MediaCallMessage_CallInitiate::default_instance_ = NULL;

MediaCallMessage_CallInitiate* MediaCallMessage_CallInitiate::New() const {
  return new MediaCallMessage_CallInitiate;
}

void MediaCallMessage_CallInitiate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__callid()) {
      if (_callid_ != &::google::protobuf::internal::kEmptyString) {
        _callid_->clear();
      }
    }
    if (has__caller()) {
      if (_caller_ != &::google::protobuf::internal::kEmptyString) {
        _caller_->clear();
      }
    }
    if (has__media_session()) {
      if (_media_session_ != &::google::protobuf::internal::kEmptyString) {
        _media_session_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaCallMessage_CallInitiate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_callid().data(), this->_callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__caller;
        break;
      }

      // required string _caller = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__caller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__caller()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_caller().data(), this->_caller().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__media_session;
        break;
      }

      // required string _media_session = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__media_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__media_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_media_session().data(), this->_media_session().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaCallMessage_CallInitiate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _callid = 1;
  if (has__callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_callid().data(), this->_callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_callid(), output);
  }

  // required string _caller = 2;
  if (has__caller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_caller().data(), this->_caller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->_caller(), output);
  }

  // required string _media_session = 3;
  if (has__media_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_media_session().data(), this->_media_session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->_media_session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaCallMessage_CallInitiate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _callid = 1;
  if (has__callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_callid().data(), this->_callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_callid(), target);
  }

  // required string _caller = 2;
  if (has__caller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_caller().data(), this->_caller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_caller(), target);
  }

  // required string _media_session = 3;
  if (has__media_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_media_session().data(), this->_media_session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_media_session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaCallMessage_CallInitiate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _callid = 1;
    if (has__callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_callid());
    }

    // required string _caller = 2;
    if (has__caller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_caller());
    }

    // required string _media_session = 3;
    if (has__media_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_media_session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaCallMessage_CallInitiate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaCallMessage_CallInitiate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaCallMessage_CallInitiate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaCallMessage_CallInitiate::MergeFrom(const MediaCallMessage_CallInitiate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__callid()) {
      set__callid(from._callid());
    }
    if (from.has__caller()) {
      set__caller(from._caller());
    }
    if (from.has__media_session()) {
      set__media_session(from._media_session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaCallMessage_CallInitiate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaCallMessage_CallInitiate::CopyFrom(const MediaCallMessage_CallInitiate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaCallMessage_CallInitiate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MediaCallMessage_CallInitiate::Swap(MediaCallMessage_CallInitiate* other) {
  if (other != this) {
    std::swap(_callid_, other->_callid_);
    std::swap(_caller_, other->_caller_);
    std::swap(_media_session_, other->_media_session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaCallMessage_CallInitiate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaCallMessage_CallInitiate_descriptor_;
  metadata.reflection = MediaCallMessage_CallInitiate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaCallMessage_CallAccept::kCallidFieldNumber;
const int MediaCallMessage_CallAccept::kCalleeFieldNumber;
#endif  // !_MSC_VER

MediaCallMessage_CallAccept::MediaCallMessage_CallAccept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaCallMessage_CallAccept::InitAsDefaultInstance() {
}

MediaCallMessage_CallAccept::MediaCallMessage_CallAccept(const MediaCallMessage_CallAccept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaCallMessage_CallAccept::SharedCtor() {
  _cached_size_ = 0;
  _callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _callee_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaCallMessage_CallAccept::~MediaCallMessage_CallAccept() {
  SharedDtor();
}

void MediaCallMessage_CallAccept::SharedDtor() {
  if (_callid_ != &::google::protobuf::internal::kEmptyString) {
    delete _callid_;
  }
  if (_callee_ != &::google::protobuf::internal::kEmptyString) {
    delete _callee_;
  }
  if (this != default_instance_) {
  }
}

void MediaCallMessage_CallAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaCallMessage_CallAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaCallMessage_CallAccept_descriptor_;
}

const MediaCallMessage_CallAccept& MediaCallMessage_CallAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaCallMessage_CallAccept* MediaCallMessage_CallAccept::default_instance_ = NULL;

MediaCallMessage_CallAccept* MediaCallMessage_CallAccept::New() const {
  return new MediaCallMessage_CallAccept;
}

void MediaCallMessage_CallAccept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__callid()) {
      if (_callid_ != &::google::protobuf::internal::kEmptyString) {
        _callid_->clear();
      }
    }
    if (has__callee()) {
      if (_callee_ != &::google::protobuf::internal::kEmptyString) {
        _callee_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaCallMessage_CallAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_callid().data(), this->_callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__callee;
        break;
      }

      // required string _callee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__callee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__callee()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_callee().data(), this->_callee().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaCallMessage_CallAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _callid = 1;
  if (has__callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_callid().data(), this->_callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_callid(), output);
  }

  // required string _callee = 2;
  if (has__callee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_callee().data(), this->_callee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->_callee(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaCallMessage_CallAccept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _callid = 1;
  if (has__callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_callid().data(), this->_callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_callid(), target);
  }

  // required string _callee = 2;
  if (has__callee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_callee().data(), this->_callee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_callee(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaCallMessage_CallAccept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _callid = 1;
    if (has__callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_callid());
    }

    // required string _callee = 2;
    if (has__callee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_callee());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaCallMessage_CallAccept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaCallMessage_CallAccept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaCallMessage_CallAccept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaCallMessage_CallAccept::MergeFrom(const MediaCallMessage_CallAccept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__callid()) {
      set__callid(from._callid());
    }
    if (from.has__callee()) {
      set__callee(from._callee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaCallMessage_CallAccept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaCallMessage_CallAccept::CopyFrom(const MediaCallMessage_CallAccept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaCallMessage_CallAccept::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MediaCallMessage_CallAccept::Swap(MediaCallMessage_CallAccept* other) {
  if (other != this) {
    std::swap(_callid_, other->_callid_);
    std::swap(_callee_, other->_callee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaCallMessage_CallAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaCallMessage_CallAccept_descriptor_;
  metadata.reflection = MediaCallMessage_CallAccept_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaCallMessage_CallTerminate::kCallidFieldNumber;
const int MediaCallMessage_CallTerminate::kReasonFieldNumber;
#endif  // !_MSC_VER

MediaCallMessage_CallTerminate::MediaCallMessage_CallTerminate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaCallMessage_CallTerminate::InitAsDefaultInstance() {
}

MediaCallMessage_CallTerminate::MediaCallMessage_CallTerminate(const MediaCallMessage_CallTerminate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaCallMessage_CallTerminate::SharedCtor() {
  _cached_size_ = 0;
  _callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaCallMessage_CallTerminate::~MediaCallMessage_CallTerminate() {
  SharedDtor();
}

void MediaCallMessage_CallTerminate::SharedDtor() {
  if (_callid_ != &::google::protobuf::internal::kEmptyString) {
    delete _callid_;
  }
  if (this != default_instance_) {
  }
}

void MediaCallMessage_CallTerminate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaCallMessage_CallTerminate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaCallMessage_CallTerminate_descriptor_;
}

const MediaCallMessage_CallTerminate& MediaCallMessage_CallTerminate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaCallMessage_CallTerminate* MediaCallMessage_CallTerminate::default_instance_ = NULL;

MediaCallMessage_CallTerminate* MediaCallMessage_CallTerminate::New() const {
  return new MediaCallMessage_CallTerminate;
}

void MediaCallMessage_CallTerminate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__callid()) {
      if (_callid_ != &::google::protobuf::internal::kEmptyString) {
        _callid_->clear();
      }
    }
    _reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaCallMessage_CallTerminate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_callid().data(), this->_callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__reason;
        break;
      }

      // required uint32 _reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_reason_)));
          set_has__reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaCallMessage_CallTerminate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _callid = 1;
  if (has__callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_callid().data(), this->_callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_callid(), output);
  }

  // required uint32 _reason = 2;
  if (has__reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaCallMessage_CallTerminate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _callid = 1;
  if (has__callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_callid().data(), this->_callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_callid(), target);
  }

  // required uint32 _reason = 2;
  if (has__reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaCallMessage_CallTerminate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _callid = 1;
    if (has__callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_callid());
    }

    // required uint32 _reason = 2;
    if (has__reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaCallMessage_CallTerminate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaCallMessage_CallTerminate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaCallMessage_CallTerminate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaCallMessage_CallTerminate::MergeFrom(const MediaCallMessage_CallTerminate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__callid()) {
      set__callid(from._callid());
    }
    if (from.has__reason()) {
      set__reason(from._reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaCallMessage_CallTerminate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaCallMessage_CallTerminate::CopyFrom(const MediaCallMessage_CallTerminate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaCallMessage_CallTerminate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MediaCallMessage_CallTerminate::Swap(MediaCallMessage_CallTerminate* other) {
  if (other != this) {
    std::swap(_callid_, other->_callid_);
    std::swap(_reason_, other->_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaCallMessage_CallTerminate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaCallMessage_CallTerminate_descriptor_;
  metadata.reflection = MediaCallMessage_CallTerminate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaCallMessage_CallInvite::kCallidFieldNumber;
const int MediaCallMessage_CallInvite::kMediaSessionFieldNumber;
#endif  // !_MSC_VER

MediaCallMessage_CallInvite::MediaCallMessage_CallInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaCallMessage_CallInvite::InitAsDefaultInstance() {
}

MediaCallMessage_CallInvite::MediaCallMessage_CallInvite(const MediaCallMessage_CallInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaCallMessage_CallInvite::SharedCtor() {
  _cached_size_ = 0;
  _callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _media_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaCallMessage_CallInvite::~MediaCallMessage_CallInvite() {
  SharedDtor();
}

void MediaCallMessage_CallInvite::SharedDtor() {
  if (_callid_ != &::google::protobuf::internal::kEmptyString) {
    delete _callid_;
  }
  if (_media_session_ != &::google::protobuf::internal::kEmptyString) {
    delete _media_session_;
  }
  if (this != default_instance_) {
  }
}

void MediaCallMessage_CallInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaCallMessage_CallInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaCallMessage_CallInvite_descriptor_;
}

const MediaCallMessage_CallInvite& MediaCallMessage_CallInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaCallMessage_CallInvite* MediaCallMessage_CallInvite::default_instance_ = NULL;

MediaCallMessage_CallInvite* MediaCallMessage_CallInvite::New() const {
  return new MediaCallMessage_CallInvite;
}

void MediaCallMessage_CallInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__callid()) {
      if (_callid_ != &::google::protobuf::internal::kEmptyString) {
        _callid_->clear();
      }
    }
    if (has__media_session()) {
      if (_media_session_ != &::google::protobuf::internal::kEmptyString) {
        _media_session_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaCallMessage_CallInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_callid().data(), this->_callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__media_session;
        break;
      }

      // required string _media_session = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__media_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__media_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_media_session().data(), this->_media_session().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaCallMessage_CallInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _callid = 1;
  if (has__callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_callid().data(), this->_callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_callid(), output);
  }

  // required string _media_session = 2;
  if (has__media_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_media_session().data(), this->_media_session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->_media_session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaCallMessage_CallInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _callid = 1;
  if (has__callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_callid().data(), this->_callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_callid(), target);
  }

  // required string _media_session = 2;
  if (has__media_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_media_session().data(), this->_media_session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_media_session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaCallMessage_CallInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _callid = 1;
    if (has__callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_callid());
    }

    // required string _media_session = 2;
    if (has__media_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_media_session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaCallMessage_CallInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaCallMessage_CallInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaCallMessage_CallInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaCallMessage_CallInvite::MergeFrom(const MediaCallMessage_CallInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__callid()) {
      set__callid(from._callid());
    }
    if (from.has__media_session()) {
      set__media_session(from._media_session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaCallMessage_CallInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaCallMessage_CallInvite::CopyFrom(const MediaCallMessage_CallInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaCallMessage_CallInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MediaCallMessage_CallInvite::Swap(MediaCallMessage_CallInvite* other) {
  if (other != this) {
    std::swap(_callid_, other->_callid_);
    std::swap(_media_session_, other->_media_session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaCallMessage_CallInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaCallMessage_CallInvite_descriptor_;
  metadata.reflection = MediaCallMessage_CallInvite_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaCallMessage::kBaseFieldNumber;
const int MediaCallMessage::kCallInitiateFieldNumber;
const int MediaCallMessage::kCallAcceptFieldNumber;
const int MediaCallMessage::kCallTerminateFieldNumber;
const int MediaCallMessage::kCallInviteFieldNumber;
#endif  // !_MSC_VER

MediaCallMessage::MediaCallMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaCallMessage::InitAsDefaultInstance() {
  _base_ = const_cast< ::MediaCallMessage_BaseMesssage*>(&::MediaCallMessage_BaseMesssage::default_instance());
  _call_initiate_ = const_cast< ::MediaCallMessage_CallInitiate*>(&::MediaCallMessage_CallInitiate::default_instance());
  _call_accept_ = const_cast< ::MediaCallMessage_CallAccept*>(&::MediaCallMessage_CallAccept::default_instance());
  _call_terminate_ = const_cast< ::MediaCallMessage_CallTerminate*>(&::MediaCallMessage_CallTerminate::default_instance());
  _call_invite_ = const_cast< ::MediaCallMessage_CallInvite*>(&::MediaCallMessage_CallInvite::default_instance());
}

MediaCallMessage::MediaCallMessage(const MediaCallMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaCallMessage::SharedCtor() {
  _cached_size_ = 0;
  _base_ = NULL;
  _call_initiate_ = NULL;
  _call_accept_ = NULL;
  _call_terminate_ = NULL;
  _call_invite_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaCallMessage::~MediaCallMessage() {
  SharedDtor();
}

void MediaCallMessage::SharedDtor() {
  if (this != default_instance_) {
    delete _base_;
    delete _call_initiate_;
    delete _call_accept_;
    delete _call_terminate_;
    delete _call_invite_;
  }
}

void MediaCallMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaCallMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaCallMessage_descriptor_;
}

const MediaCallMessage& MediaCallMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mediaappsingnal_2eproto();
  return *default_instance_;
}

MediaCallMessage* MediaCallMessage::default_instance_ = NULL;

MediaCallMessage* MediaCallMessage::New() const {
  return new MediaCallMessage;
}

void MediaCallMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__base()) {
      if (_base_ != NULL) _base_->::MediaCallMessage_BaseMesssage::Clear();
    }
    if (has__call_initiate()) {
      if (_call_initiate_ != NULL) _call_initiate_->::MediaCallMessage_CallInitiate::Clear();
    }
    if (has__call_accept()) {
      if (_call_accept_ != NULL) _call_accept_->::MediaCallMessage_CallAccept::Clear();
    }
    if (has__call_terminate()) {
      if (_call_terminate_ != NULL) _call_terminate_->::MediaCallMessage_CallTerminate::Clear();
    }
    if (has__call_invite()) {
      if (_call_invite_ != NULL) _call_invite_->::MediaCallMessage_CallInvite::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaCallMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MediaCallMessage.BaseMesssage _base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__call_initiate;
        break;
      }

      // optional .MediaCallMessage.CallInitiate _call_initiate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__call_initiate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__call_initiate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__call_accept;
        break;
      }

      // optional .MediaCallMessage.CallAccept _call_accept = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__call_accept:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__call_accept()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__call_terminate;
        break;
      }

      // optional .MediaCallMessage.CallTerminate _call_terminate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__call_terminate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__call_terminate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__call_invite;
        break;
      }

      // optional .MediaCallMessage.CallInvite _call_invite = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__call_invite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__call_invite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaCallMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .MediaCallMessage.BaseMesssage _base = 1;
  if (has__base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_base(), output);
  }

  // optional .MediaCallMessage.CallInitiate _call_initiate = 2;
  if (has__call_initiate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_call_initiate(), output);
  }

  // optional .MediaCallMessage.CallAccept _call_accept = 3;
  if (has__call_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_call_accept(), output);
  }

  // optional .MediaCallMessage.CallTerminate _call_terminate = 4;
  if (has__call_terminate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_call_terminate(), output);
  }

  // optional .MediaCallMessage.CallInvite _call_invite = 5;
  if (has__call_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_call_invite(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaCallMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MediaCallMessage.BaseMesssage _base = 1;
  if (has__base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_base(), target);
  }

  // optional .MediaCallMessage.CallInitiate _call_initiate = 2;
  if (has__call_initiate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_call_initiate(), target);
  }

  // optional .MediaCallMessage.CallAccept _call_accept = 3;
  if (has__call_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_call_accept(), target);
  }

  // optional .MediaCallMessage.CallTerminate _call_terminate = 4;
  if (has__call_terminate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_call_terminate(), target);
  }

  // optional .MediaCallMessage.CallInvite _call_invite = 5;
  if (has__call_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_call_invite(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaCallMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MediaCallMessage.BaseMesssage _base = 1;
    if (has__base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_base());
    }

    // optional .MediaCallMessage.CallInitiate _call_initiate = 2;
    if (has__call_initiate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_call_initiate());
    }

    // optional .MediaCallMessage.CallAccept _call_accept = 3;
    if (has__call_accept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_call_accept());
    }

    // optional .MediaCallMessage.CallTerminate _call_terminate = 4;
    if (has__call_terminate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_call_terminate());
    }

    // optional .MediaCallMessage.CallInvite _call_invite = 5;
    if (has__call_invite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_call_invite());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaCallMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaCallMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaCallMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaCallMessage::MergeFrom(const MediaCallMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__base()) {
      mutable__base()->::MediaCallMessage_BaseMesssage::MergeFrom(from._base());
    }
    if (from.has__call_initiate()) {
      mutable__call_initiate()->::MediaCallMessage_CallInitiate::MergeFrom(from._call_initiate());
    }
    if (from.has__call_accept()) {
      mutable__call_accept()->::MediaCallMessage_CallAccept::MergeFrom(from._call_accept());
    }
    if (from.has__call_terminate()) {
      mutable__call_terminate()->::MediaCallMessage_CallTerminate::MergeFrom(from._call_terminate());
    }
    if (from.has__call_invite()) {
      mutable__call_invite()->::MediaCallMessage_CallInvite::MergeFrom(from._call_invite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaCallMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaCallMessage::CopyFrom(const MediaCallMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaCallMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__base()) {
    if (!this->_base().IsInitialized()) return false;
  }
  if (has__call_initiate()) {
    if (!this->_call_initiate().IsInitialized()) return false;
  }
  if (has__call_accept()) {
    if (!this->_call_accept().IsInitialized()) return false;
  }
  if (has__call_terminate()) {
    if (!this->_call_terminate().IsInitialized()) return false;
  }
  if (has__call_invite()) {
    if (!this->_call_invite().IsInitialized()) return false;
  }
  return true;
}

void MediaCallMessage::Swap(MediaCallMessage* other) {
  if (other != this) {
    std::swap(_base_, other->_base_);
    std::swap(_call_initiate_, other->_call_initiate_);
    std::swap(_call_accept_, other->_call_accept_);
    std::swap(_call_terminate_, other->_call_terminate_);
    std::swap(_call_invite_, other->_call_invite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaCallMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaCallMessage_descriptor_;
  metadata.reflection = MediaCallMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
