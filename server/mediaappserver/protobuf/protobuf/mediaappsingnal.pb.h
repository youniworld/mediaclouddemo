// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/mediaappsingnal.proto

#ifndef PROTOBUF_protobuf_2fmediaappsingnal_2eproto__INCLUDED
#define PROTOBUF_protobuf_2fmediaappsingnal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

class MediaAppSignalMessage;
class MediaAppSignalMessage_MediaMessageBase;
class MediaSignalMessage;
class MediaSignalMessage_Login;
class MediaSignalMessage_LoginResp;
class MediaSignalMessage_Logout;
class MediaSignalMessage_OnlineStateChange;
class MediaSignalMessage_ping;
class MediaSignalMessage_pong;
class MediaCallMessage;
class MediaCallMessage_BaseMesssage;
class MediaCallMessage_CallInitiate;
class MediaCallMessage_CallAccept;
class MediaCallMessage_CallTerminate;
class MediaCallMessage_CallInvite;

// ===================================================================

class MediaAppSignalMessage_MediaMessageBase : public ::google::protobuf::Message {
 public:
  MediaAppSignalMessage_MediaMessageBase();
  virtual ~MediaAppSignalMessage_MediaMessageBase();

  MediaAppSignalMessage_MediaMessageBase(const MediaAppSignalMessage_MediaMessageBase& from);

  inline MediaAppSignalMessage_MediaMessageBase& operator=(const MediaAppSignalMessage_MediaMessageBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaAppSignalMessage_MediaMessageBase& default_instance();

  void Swap(MediaAppSignalMessage_MediaMessageBase* other);

  // implements Message ----------------------------------------------

  MediaAppSignalMessage_MediaMessageBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaAppSignalMessage_MediaMessageBase& from);
  void MergeFrom(const MediaAppSignalMessage_MediaMessageBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 _packetId = 1;
  inline bool has__packetid() const;
  inline void clear__packetid();
  static const int kPacketIdFieldNumber = 1;
  inline ::google::protobuf::uint64 _packetid() const;
  inline void set__packetid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MediaAppSignalMessage.MediaMessageBase)
 private:
  inline void set_has__packetid();
  inline void clear_has__packetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 _packetid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaAppSignalMessage_MediaMessageBase* default_instance_;
};
// -------------------------------------------------------------------

class MediaAppSignalMessage : public ::google::protobuf::Message {
 public:
  MediaAppSignalMessage();
  virtual ~MediaAppSignalMessage();

  MediaAppSignalMessage(const MediaAppSignalMessage& from);

  inline MediaAppSignalMessage& operator=(const MediaAppSignalMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaAppSignalMessage& default_instance();

  void Swap(MediaAppSignalMessage* other);

  // implements Message ----------------------------------------------

  MediaAppSignalMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaAppSignalMessage& from);
  void MergeFrom(const MediaAppSignalMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MediaAppSignalMessage_MediaMessageBase MediaMessageBase;

  // accessors -------------------------------------------------------

  // optional .MediaSignalMessage _signal = 1;
  inline bool has__signal() const;
  inline void clear__signal();
  static const int kSignalFieldNumber = 1;
  inline const ::MediaSignalMessage& _signal() const;
  inline ::MediaSignalMessage* mutable__signal();
  inline ::MediaSignalMessage* release__signal();
  inline void set_allocated__signal(::MediaSignalMessage* _signal);

  // optional .MediaCallMessage _call = 2;
  inline bool has__call() const;
  inline void clear__call();
  static const int kCallFieldNumber = 2;
  inline const ::MediaCallMessage& _call() const;
  inline ::MediaCallMessage* mutable__call();
  inline ::MediaCallMessage* release__call();
  inline void set_allocated__call(::MediaCallMessage* _call);

  // optional .MediaAppSignalMessage.MediaMessageBase _base = 3;
  inline bool has__base() const;
  inline void clear__base();
  static const int kBaseFieldNumber = 3;
  inline const ::MediaAppSignalMessage_MediaMessageBase& _base() const;
  inline ::MediaAppSignalMessage_MediaMessageBase* mutable__base();
  inline ::MediaAppSignalMessage_MediaMessageBase* release__base();
  inline void set_allocated__base(::MediaAppSignalMessage_MediaMessageBase* _base);

  // @@protoc_insertion_point(class_scope:MediaAppSignalMessage)
 private:
  inline void set_has__signal();
  inline void clear_has__signal();
  inline void set_has__call();
  inline void clear_has__call();
  inline void set_has__base();
  inline void clear_has__base();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MediaSignalMessage* _signal_;
  ::MediaCallMessage* _call_;
  ::MediaAppSignalMessage_MediaMessageBase* _base_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaAppSignalMessage* default_instance_;
};
// -------------------------------------------------------------------

class MediaSignalMessage_Login : public ::google::protobuf::Message {
 public:
  MediaSignalMessage_Login();
  virtual ~MediaSignalMessage_Login();

  MediaSignalMessage_Login(const MediaSignalMessage_Login& from);

  inline MediaSignalMessage_Login& operator=(const MediaSignalMessage_Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaSignalMessage_Login& default_instance();

  void Swap(MediaSignalMessage_Login* other);

  // implements Message ----------------------------------------------

  MediaSignalMessage_Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaSignalMessage_Login& from);
  void MergeFrom(const MediaSignalMessage_Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string _uid = 1;
  inline bool has__uid() const;
  inline void clear__uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& _uid() const;
  inline void set__uid(const ::std::string& value);
  inline void set__uid(const char* value);
  inline void set__uid(const char* value, size_t size);
  inline ::std::string* mutable__uid();
  inline ::std::string* release__uid();
  inline void set_allocated__uid(::std::string* _uid);

  // required string _pwd = 2;
  inline bool has__pwd() const;
  inline void clear__pwd();
  static const int kPwdFieldNumber = 2;
  inline const ::std::string& _pwd() const;
  inline void set__pwd(const ::std::string& value);
  inline void set__pwd(const char* value);
  inline void set__pwd(const char* value, size_t size);
  inline ::std::string* mutable__pwd();
  inline ::std::string* release__pwd();
  inline void set_allocated__pwd(::std::string* _pwd);

  // required string _portal = 3;
  inline bool has__portal() const;
  inline void clear__portal();
  static const int kPortalFieldNumber = 3;
  inline const ::std::string& _portal() const;
  inline void set__portal(const ::std::string& value);
  inline void set__portal(const char* value);
  inline void set__portal(const char* value, size_t size);
  inline ::std::string* mutable__portal();
  inline ::std::string* release__portal();
  inline void set_allocated__portal(::std::string* _portal);

  // @@protoc_insertion_point(class_scope:MediaSignalMessage.Login)
 private:
  inline void set_has__uid();
  inline void clear_has__uid();
  inline void set_has__pwd();
  inline void clear_has__pwd();
  inline void set_has__portal();
  inline void clear_has__portal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* _uid_;
  ::std::string* _pwd_;
  ::std::string* _portal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaSignalMessage_Login* default_instance_;
};
// -------------------------------------------------------------------

class MediaSignalMessage_LoginResp : public ::google::protobuf::Message {
 public:
  MediaSignalMessage_LoginResp();
  virtual ~MediaSignalMessage_LoginResp();

  MediaSignalMessage_LoginResp(const MediaSignalMessage_LoginResp& from);

  inline MediaSignalMessage_LoginResp& operator=(const MediaSignalMessage_LoginResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaSignalMessage_LoginResp& default_instance();

  void Swap(MediaSignalMessage_LoginResp* other);

  // implements Message ----------------------------------------------

  MediaSignalMessage_LoginResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaSignalMessage_LoginResp& from);
  void MergeFrom(const MediaSignalMessage_LoginResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string _token = 1;
  inline bool has__token() const;
  inline void clear__token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& _token() const;
  inline void set__token(const ::std::string& value);
  inline void set__token(const char* value);
  inline void set__token(const char* value, size_t size);
  inline ::std::string* mutable__token();
  inline ::std::string* release__token();
  inline void set_allocated__token(::std::string* _token);

  // required uint32 _code = 2;
  inline bool has__code() const;
  inline void clear__code();
  static const int kCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 _code() const;
  inline void set__code(::google::protobuf::uint32 value);

  // required string _failed_reason = 3;
  inline bool has__failed_reason() const;
  inline void clear__failed_reason();
  static const int kFailedReasonFieldNumber = 3;
  inline const ::std::string& _failed_reason() const;
  inline void set__failed_reason(const ::std::string& value);
  inline void set__failed_reason(const char* value);
  inline void set__failed_reason(const char* value, size_t size);
  inline ::std::string* mutable__failed_reason();
  inline ::std::string* release__failed_reason();
  inline void set_allocated__failed_reason(::std::string* _failed_reason);

  // @@protoc_insertion_point(class_scope:MediaSignalMessage.LoginResp)
 private:
  inline void set_has__token();
  inline void clear_has__token();
  inline void set_has__code();
  inline void clear_has__code();
  inline void set_has__failed_reason();
  inline void clear_has__failed_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* _token_;
  ::std::string* _failed_reason_;
  ::google::protobuf::uint32 _code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaSignalMessage_LoginResp* default_instance_;
};
// -------------------------------------------------------------------

class MediaSignalMessage_Logout : public ::google::protobuf::Message {
 public:
  MediaSignalMessage_Logout();
  virtual ~MediaSignalMessage_Logout();

  MediaSignalMessage_Logout(const MediaSignalMessage_Logout& from);

  inline MediaSignalMessage_Logout& operator=(const MediaSignalMessage_Logout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaSignalMessage_Logout& default_instance();

  void Swap(MediaSignalMessage_Logout* other);

  // implements Message ----------------------------------------------

  MediaSignalMessage_Logout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaSignalMessage_Logout& from);
  void MergeFrom(const MediaSignalMessage_Logout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string _uid = 1;
  inline bool has__uid() const;
  inline void clear__uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& _uid() const;
  inline void set__uid(const ::std::string& value);
  inline void set__uid(const char* value);
  inline void set__uid(const char* value, size_t size);
  inline ::std::string* mutable__uid();
  inline ::std::string* release__uid();
  inline void set_allocated__uid(::std::string* _uid);

  // @@protoc_insertion_point(class_scope:MediaSignalMessage.Logout)
 private:
  inline void set_has__uid();
  inline void clear_has__uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* _uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaSignalMessage_Logout* default_instance_;
};
// -------------------------------------------------------------------

class MediaSignalMessage_OnlineStateChange : public ::google::protobuf::Message {
 public:
  MediaSignalMessage_OnlineStateChange();
  virtual ~MediaSignalMessage_OnlineStateChange();

  MediaSignalMessage_OnlineStateChange(const MediaSignalMessage_OnlineStateChange& from);

  inline MediaSignalMessage_OnlineStateChange& operator=(const MediaSignalMessage_OnlineStateChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaSignalMessage_OnlineStateChange& default_instance();

  void Swap(MediaSignalMessage_OnlineStateChange* other);

  // implements Message ----------------------------------------------

  MediaSignalMessage_OnlineStateChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaSignalMessage_OnlineStateChange& from);
  void MergeFrom(const MediaSignalMessage_OnlineStateChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string _uid = 1;
  inline bool has__uid() const;
  inline void clear__uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& _uid() const;
  inline void set__uid(const ::std::string& value);
  inline void set__uid(const char* value);
  inline void set__uid(const char* value, size_t size);
  inline ::std::string* mutable__uid();
  inline ::std::string* release__uid();
  inline void set_allocated__uid(::std::string* _uid);

  // required uint32 _state = 2;
  inline bool has__state() const;
  inline void clear__state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 _state() const;
  inline void set__state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MediaSignalMessage.OnlineStateChange)
 private:
  inline void set_has__uid();
  inline void clear_has__uid();
  inline void set_has__state();
  inline void clear_has__state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* _uid_;
  ::google::protobuf::uint32 _state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaSignalMessage_OnlineStateChange* default_instance_;
};
// -------------------------------------------------------------------

class MediaSignalMessage_ping : public ::google::protobuf::Message {
 public:
  MediaSignalMessage_ping();
  virtual ~MediaSignalMessage_ping();

  MediaSignalMessage_ping(const MediaSignalMessage_ping& from);

  inline MediaSignalMessage_ping& operator=(const MediaSignalMessage_ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaSignalMessage_ping& default_instance();

  void Swap(MediaSignalMessage_ping* other);

  // implements Message ----------------------------------------------

  MediaSignalMessage_ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaSignalMessage_ping& from);
  void MergeFrom(const MediaSignalMessage_ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MediaSignalMessage.ping)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaSignalMessage_ping* default_instance_;
};
// -------------------------------------------------------------------

class MediaSignalMessage_pong : public ::google::protobuf::Message {
 public:
  MediaSignalMessage_pong();
  virtual ~MediaSignalMessage_pong();

  MediaSignalMessage_pong(const MediaSignalMessage_pong& from);

  inline MediaSignalMessage_pong& operator=(const MediaSignalMessage_pong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaSignalMessage_pong& default_instance();

  void Swap(MediaSignalMessage_pong* other);

  // implements Message ----------------------------------------------

  MediaSignalMessage_pong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaSignalMessage_pong& from);
  void MergeFrom(const MediaSignalMessage_pong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MediaSignalMessage.pong)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaSignalMessage_pong* default_instance_;
};
// -------------------------------------------------------------------

class MediaSignalMessage : public ::google::protobuf::Message {
 public:
  MediaSignalMessage();
  virtual ~MediaSignalMessage();

  MediaSignalMessage(const MediaSignalMessage& from);

  inline MediaSignalMessage& operator=(const MediaSignalMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaSignalMessage& default_instance();

  void Swap(MediaSignalMessage* other);

  // implements Message ----------------------------------------------

  MediaSignalMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaSignalMessage& from);
  void MergeFrom(const MediaSignalMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MediaSignalMessage_Login Login;
  typedef MediaSignalMessage_LoginResp LoginResp;
  typedef MediaSignalMessage_Logout Logout;
  typedef MediaSignalMessage_OnlineStateChange OnlineStateChange;
  typedef MediaSignalMessage_ping ping;
  typedef MediaSignalMessage_pong pong;

  // accessors -------------------------------------------------------

  // optional .MediaSignalMessage.Login _login = 1;
  inline bool has__login() const;
  inline void clear__login();
  static const int kLoginFieldNumber = 1;
  inline const ::MediaSignalMessage_Login& _login() const;
  inline ::MediaSignalMessage_Login* mutable__login();
  inline ::MediaSignalMessage_Login* release__login();
  inline void set_allocated__login(::MediaSignalMessage_Login* _login);

  // optional .MediaSignalMessage.Logout _logout = 2;
  inline bool has__logout() const;
  inline void clear__logout();
  static const int kLogoutFieldNumber = 2;
  inline const ::MediaSignalMessage_Logout& _logout() const;
  inline ::MediaSignalMessage_Logout* mutable__logout();
  inline ::MediaSignalMessage_Logout* release__logout();
  inline void set_allocated__logout(::MediaSignalMessage_Logout* _logout);

  // optional .MediaSignalMessage.OnlineStateChange _stateChanged = 3;
  inline bool has__statechanged() const;
  inline void clear__statechanged();
  static const int kStateChangedFieldNumber = 3;
  inline const ::MediaSignalMessage_OnlineStateChange& _statechanged() const;
  inline ::MediaSignalMessage_OnlineStateChange* mutable__statechanged();
  inline ::MediaSignalMessage_OnlineStateChange* release__statechanged();
  inline void set_allocated__statechanged(::MediaSignalMessage_OnlineStateChange* _statechanged);

  // optional .MediaSignalMessage.ping _ping = 4;
  inline bool has__ping() const;
  inline void clear__ping();
  static const int kPingFieldNumber = 4;
  inline const ::MediaSignalMessage_ping& _ping() const;
  inline ::MediaSignalMessage_ping* mutable__ping();
  inline ::MediaSignalMessage_ping* release__ping();
  inline void set_allocated__ping(::MediaSignalMessage_ping* _ping);

  // optional .MediaSignalMessage.pong _pong = 5;
  inline bool has__pong() const;
  inline void clear__pong();
  static const int kPongFieldNumber = 5;
  inline const ::MediaSignalMessage_pong& _pong() const;
  inline ::MediaSignalMessage_pong* mutable__pong();
  inline ::MediaSignalMessage_pong* release__pong();
  inline void set_allocated__pong(::MediaSignalMessage_pong* _pong);

  // optional .MediaSignalMessage.LoginResp _loginResp = 6;
  inline bool has__loginresp() const;
  inline void clear__loginresp();
  static const int kLoginRespFieldNumber = 6;
  inline const ::MediaSignalMessage_LoginResp& _loginresp() const;
  inline ::MediaSignalMessage_LoginResp* mutable__loginresp();
  inline ::MediaSignalMessage_LoginResp* release__loginresp();
  inline void set_allocated__loginresp(::MediaSignalMessage_LoginResp* _loginresp);

  // @@protoc_insertion_point(class_scope:MediaSignalMessage)
 private:
  inline void set_has__login();
  inline void clear_has__login();
  inline void set_has__logout();
  inline void clear_has__logout();
  inline void set_has__statechanged();
  inline void clear_has__statechanged();
  inline void set_has__ping();
  inline void clear_has__ping();
  inline void set_has__pong();
  inline void clear_has__pong();
  inline void set_has__loginresp();
  inline void clear_has__loginresp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MediaSignalMessage_Login* _login_;
  ::MediaSignalMessage_Logout* _logout_;
  ::MediaSignalMessage_OnlineStateChange* _statechanged_;
  ::MediaSignalMessage_ping* _ping_;
  ::MediaSignalMessage_pong* _pong_;
  ::MediaSignalMessage_LoginResp* _loginresp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaSignalMessage* default_instance_;
};
// -------------------------------------------------------------------

class MediaCallMessage_BaseMesssage : public ::google::protobuf::Message {
 public:
  MediaCallMessage_BaseMesssage();
  virtual ~MediaCallMessage_BaseMesssage();

  MediaCallMessage_BaseMesssage(const MediaCallMessage_BaseMesssage& from);

  inline MediaCallMessage_BaseMesssage& operator=(const MediaCallMessage_BaseMesssage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaCallMessage_BaseMesssage& default_instance();

  void Swap(MediaCallMessage_BaseMesssage* other);

  // implements Message ----------------------------------------------

  MediaCallMessage_BaseMesssage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaCallMessage_BaseMesssage& from);
  void MergeFrom(const MediaCallMessage_BaseMesssage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string _from = 1;
  inline bool has__from() const;
  inline void clear__from();
  static const int kFromFieldNumber = 1;
  inline const ::std::string& _from() const;
  inline void set__from(const ::std::string& value);
  inline void set__from(const char* value);
  inline void set__from(const char* value, size_t size);
  inline ::std::string* mutable__from();
  inline ::std::string* release__from();
  inline void set_allocated__from(::std::string* _from);

  // required string _to = 2;
  inline bool has__to() const;
  inline void clear__to();
  static const int kToFieldNumber = 2;
  inline const ::std::string& _to() const;
  inline void set__to(const ::std::string& value);
  inline void set__to(const char* value);
  inline void set__to(const char* value, size_t size);
  inline ::std::string* mutable__to();
  inline ::std::string* release__to();
  inline void set_allocated__to(::std::string* _to);

  // required string _portal = 3;
  inline bool has__portal() const;
  inline void clear__portal();
  static const int kPortalFieldNumber = 3;
  inline const ::std::string& _portal() const;
  inline void set__portal(const ::std::string& value);
  inline void set__portal(const char* value);
  inline void set__portal(const char* value, size_t size);
  inline ::std::string* mutable__portal();
  inline ::std::string* release__portal();
  inline void set_allocated__portal(::std::string* _portal);

  // @@protoc_insertion_point(class_scope:MediaCallMessage.BaseMesssage)
 private:
  inline void set_has__from();
  inline void clear_has__from();
  inline void set_has__to();
  inline void clear_has__to();
  inline void set_has__portal();
  inline void clear_has__portal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* _from_;
  ::std::string* _to_;
  ::std::string* _portal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaCallMessage_BaseMesssage* default_instance_;
};
// -------------------------------------------------------------------

class MediaCallMessage_CallInitiate : public ::google::protobuf::Message {
 public:
  MediaCallMessage_CallInitiate();
  virtual ~MediaCallMessage_CallInitiate();

  MediaCallMessage_CallInitiate(const MediaCallMessage_CallInitiate& from);

  inline MediaCallMessage_CallInitiate& operator=(const MediaCallMessage_CallInitiate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaCallMessage_CallInitiate& default_instance();

  void Swap(MediaCallMessage_CallInitiate* other);

  // implements Message ----------------------------------------------

  MediaCallMessage_CallInitiate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaCallMessage_CallInitiate& from);
  void MergeFrom(const MediaCallMessage_CallInitiate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string _callid = 1;
  inline bool has__callid() const;
  inline void clear__callid();
  static const int kCallidFieldNumber = 1;
  inline const ::std::string& _callid() const;
  inline void set__callid(const ::std::string& value);
  inline void set__callid(const char* value);
  inline void set__callid(const char* value, size_t size);
  inline ::std::string* mutable__callid();
  inline ::std::string* release__callid();
  inline void set_allocated__callid(::std::string* _callid);

  // required string _caller = 2;
  inline bool has__caller() const;
  inline void clear__caller();
  static const int kCallerFieldNumber = 2;
  inline const ::std::string& _caller() const;
  inline void set__caller(const ::std::string& value);
  inline void set__caller(const char* value);
  inline void set__caller(const char* value, size_t size);
  inline ::std::string* mutable__caller();
  inline ::std::string* release__caller();
  inline void set_allocated__caller(::std::string* _caller);

  // required string _media_session = 3;
  inline bool has__media_session() const;
  inline void clear__media_session();
  static const int kMediaSessionFieldNumber = 3;
  inline const ::std::string& _media_session() const;
  inline void set__media_session(const ::std::string& value);
  inline void set__media_session(const char* value);
  inline void set__media_session(const char* value, size_t size);
  inline ::std::string* mutable__media_session();
  inline ::std::string* release__media_session();
  inline void set_allocated__media_session(::std::string* _media_session);

  // @@protoc_insertion_point(class_scope:MediaCallMessage.CallInitiate)
 private:
  inline void set_has__callid();
  inline void clear_has__callid();
  inline void set_has__caller();
  inline void clear_has__caller();
  inline void set_has__media_session();
  inline void clear_has__media_session();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* _callid_;
  ::std::string* _caller_;
  ::std::string* _media_session_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaCallMessage_CallInitiate* default_instance_;
};
// -------------------------------------------------------------------

class MediaCallMessage_CallAccept : public ::google::protobuf::Message {
 public:
  MediaCallMessage_CallAccept();
  virtual ~MediaCallMessage_CallAccept();

  MediaCallMessage_CallAccept(const MediaCallMessage_CallAccept& from);

  inline MediaCallMessage_CallAccept& operator=(const MediaCallMessage_CallAccept& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaCallMessage_CallAccept& default_instance();

  void Swap(MediaCallMessage_CallAccept* other);

  // implements Message ----------------------------------------------

  MediaCallMessage_CallAccept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaCallMessage_CallAccept& from);
  void MergeFrom(const MediaCallMessage_CallAccept& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string _callid = 1;
  inline bool has__callid() const;
  inline void clear__callid();
  static const int kCallidFieldNumber = 1;
  inline const ::std::string& _callid() const;
  inline void set__callid(const ::std::string& value);
  inline void set__callid(const char* value);
  inline void set__callid(const char* value, size_t size);
  inline ::std::string* mutable__callid();
  inline ::std::string* release__callid();
  inline void set_allocated__callid(::std::string* _callid);

  // required string _callee = 2;
  inline bool has__callee() const;
  inline void clear__callee();
  static const int kCalleeFieldNumber = 2;
  inline const ::std::string& _callee() const;
  inline void set__callee(const ::std::string& value);
  inline void set__callee(const char* value);
  inline void set__callee(const char* value, size_t size);
  inline ::std::string* mutable__callee();
  inline ::std::string* release__callee();
  inline void set_allocated__callee(::std::string* _callee);

  // @@protoc_insertion_point(class_scope:MediaCallMessage.CallAccept)
 private:
  inline void set_has__callid();
  inline void clear_has__callid();
  inline void set_has__callee();
  inline void clear_has__callee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* _callid_;
  ::std::string* _callee_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaCallMessage_CallAccept* default_instance_;
};
// -------------------------------------------------------------------

class MediaCallMessage_CallTerminate : public ::google::protobuf::Message {
 public:
  MediaCallMessage_CallTerminate();
  virtual ~MediaCallMessage_CallTerminate();

  MediaCallMessage_CallTerminate(const MediaCallMessage_CallTerminate& from);

  inline MediaCallMessage_CallTerminate& operator=(const MediaCallMessage_CallTerminate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaCallMessage_CallTerminate& default_instance();

  void Swap(MediaCallMessage_CallTerminate* other);

  // implements Message ----------------------------------------------

  MediaCallMessage_CallTerminate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaCallMessage_CallTerminate& from);
  void MergeFrom(const MediaCallMessage_CallTerminate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string _callid = 1;
  inline bool has__callid() const;
  inline void clear__callid();
  static const int kCallidFieldNumber = 1;
  inline const ::std::string& _callid() const;
  inline void set__callid(const ::std::string& value);
  inline void set__callid(const char* value);
  inline void set__callid(const char* value, size_t size);
  inline ::std::string* mutable__callid();
  inline ::std::string* release__callid();
  inline void set_allocated__callid(::std::string* _callid);

  // required uint32 _reason = 2;
  inline bool has__reason() const;
  inline void clear__reason();
  static const int kReasonFieldNumber = 2;
  inline ::google::protobuf::uint32 _reason() const;
  inline void set__reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MediaCallMessage.CallTerminate)
 private:
  inline void set_has__callid();
  inline void clear_has__callid();
  inline void set_has__reason();
  inline void clear_has__reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* _callid_;
  ::google::protobuf::uint32 _reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaCallMessage_CallTerminate* default_instance_;
};
// -------------------------------------------------------------------

class MediaCallMessage_CallInvite : public ::google::protobuf::Message {
 public:
  MediaCallMessage_CallInvite();
  virtual ~MediaCallMessage_CallInvite();

  MediaCallMessage_CallInvite(const MediaCallMessage_CallInvite& from);

  inline MediaCallMessage_CallInvite& operator=(const MediaCallMessage_CallInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaCallMessage_CallInvite& default_instance();

  void Swap(MediaCallMessage_CallInvite* other);

  // implements Message ----------------------------------------------

  MediaCallMessage_CallInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaCallMessage_CallInvite& from);
  void MergeFrom(const MediaCallMessage_CallInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string _callid = 1;
  inline bool has__callid() const;
  inline void clear__callid();
  static const int kCallidFieldNumber = 1;
  inline const ::std::string& _callid() const;
  inline void set__callid(const ::std::string& value);
  inline void set__callid(const char* value);
  inline void set__callid(const char* value, size_t size);
  inline ::std::string* mutable__callid();
  inline ::std::string* release__callid();
  inline void set_allocated__callid(::std::string* _callid);

  // required string _media_session = 2;
  inline bool has__media_session() const;
  inline void clear__media_session();
  static const int kMediaSessionFieldNumber = 2;
  inline const ::std::string& _media_session() const;
  inline void set__media_session(const ::std::string& value);
  inline void set__media_session(const char* value);
  inline void set__media_session(const char* value, size_t size);
  inline ::std::string* mutable__media_session();
  inline ::std::string* release__media_session();
  inline void set_allocated__media_session(::std::string* _media_session);

  // @@protoc_insertion_point(class_scope:MediaCallMessage.CallInvite)
 private:
  inline void set_has__callid();
  inline void clear_has__callid();
  inline void set_has__media_session();
  inline void clear_has__media_session();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* _callid_;
  ::std::string* _media_session_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaCallMessage_CallInvite* default_instance_;
};
// -------------------------------------------------------------------

class MediaCallMessage : public ::google::protobuf::Message {
 public:
  MediaCallMessage();
  virtual ~MediaCallMessage();

  MediaCallMessage(const MediaCallMessage& from);

  inline MediaCallMessage& operator=(const MediaCallMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaCallMessage& default_instance();

  void Swap(MediaCallMessage* other);

  // implements Message ----------------------------------------------

  MediaCallMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaCallMessage& from);
  void MergeFrom(const MediaCallMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MediaCallMessage_BaseMesssage BaseMesssage;
  typedef MediaCallMessage_CallInitiate CallInitiate;
  typedef MediaCallMessage_CallAccept CallAccept;
  typedef MediaCallMessage_CallTerminate CallTerminate;
  typedef MediaCallMessage_CallInvite CallInvite;

  // accessors -------------------------------------------------------

  // required .MediaCallMessage.BaseMesssage _base = 1;
  inline bool has__base() const;
  inline void clear__base();
  static const int kBaseFieldNumber = 1;
  inline const ::MediaCallMessage_BaseMesssage& _base() const;
  inline ::MediaCallMessage_BaseMesssage* mutable__base();
  inline ::MediaCallMessage_BaseMesssage* release__base();
  inline void set_allocated__base(::MediaCallMessage_BaseMesssage* _base);

  // optional .MediaCallMessage.CallInitiate _call_initiate = 2;
  inline bool has__call_initiate() const;
  inline void clear__call_initiate();
  static const int kCallInitiateFieldNumber = 2;
  inline const ::MediaCallMessage_CallInitiate& _call_initiate() const;
  inline ::MediaCallMessage_CallInitiate* mutable__call_initiate();
  inline ::MediaCallMessage_CallInitiate* release__call_initiate();
  inline void set_allocated__call_initiate(::MediaCallMessage_CallInitiate* _call_initiate);

  // optional .MediaCallMessage.CallAccept _call_accept = 3;
  inline bool has__call_accept() const;
  inline void clear__call_accept();
  static const int kCallAcceptFieldNumber = 3;
  inline const ::MediaCallMessage_CallAccept& _call_accept() const;
  inline ::MediaCallMessage_CallAccept* mutable__call_accept();
  inline ::MediaCallMessage_CallAccept* release__call_accept();
  inline void set_allocated__call_accept(::MediaCallMessage_CallAccept* _call_accept);

  // optional .MediaCallMessage.CallTerminate _call_terminate = 4;
  inline bool has__call_terminate() const;
  inline void clear__call_terminate();
  static const int kCallTerminateFieldNumber = 4;
  inline const ::MediaCallMessage_CallTerminate& _call_terminate() const;
  inline ::MediaCallMessage_CallTerminate* mutable__call_terminate();
  inline ::MediaCallMessage_CallTerminate* release__call_terminate();
  inline void set_allocated__call_terminate(::MediaCallMessage_CallTerminate* _call_terminate);

  // optional .MediaCallMessage.CallInvite _call_invite = 5;
  inline bool has__call_invite() const;
  inline void clear__call_invite();
  static const int kCallInviteFieldNumber = 5;
  inline const ::MediaCallMessage_CallInvite& _call_invite() const;
  inline ::MediaCallMessage_CallInvite* mutable__call_invite();
  inline ::MediaCallMessage_CallInvite* release__call_invite();
  inline void set_allocated__call_invite(::MediaCallMessage_CallInvite* _call_invite);

  // @@protoc_insertion_point(class_scope:MediaCallMessage)
 private:
  inline void set_has__base();
  inline void clear_has__base();
  inline void set_has__call_initiate();
  inline void clear_has__call_initiate();
  inline void set_has__call_accept();
  inline void clear_has__call_accept();
  inline void set_has__call_terminate();
  inline void clear_has__call_terminate();
  inline void set_has__call_invite();
  inline void clear_has__call_invite();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MediaCallMessage_BaseMesssage* _base_;
  ::MediaCallMessage_CallInitiate* _call_initiate_;
  ::MediaCallMessage_CallAccept* _call_accept_;
  ::MediaCallMessage_CallTerminate* _call_terminate_;
  ::MediaCallMessage_CallInvite* _call_invite_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fmediaappsingnal_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fmediaappsingnal_2eproto();

  void InitAsDefaultInstance();
  static MediaCallMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// MediaAppSignalMessage_MediaMessageBase

// required uint64 _packetId = 1;
inline bool MediaAppSignalMessage_MediaMessageBase::has__packetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaAppSignalMessage_MediaMessageBase::set_has__packetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaAppSignalMessage_MediaMessageBase::clear_has__packetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaAppSignalMessage_MediaMessageBase::clear__packetid() {
  _packetid_ = GOOGLE_ULONGLONG(0);
  clear_has__packetid();
}
inline ::google::protobuf::uint64 MediaAppSignalMessage_MediaMessageBase::_packetid() const {
  return _packetid_;
}
inline void MediaAppSignalMessage_MediaMessageBase::set__packetid(::google::protobuf::uint64 value) {
  set_has__packetid();
  _packetid_ = value;
}

// -------------------------------------------------------------------

// MediaAppSignalMessage

// optional .MediaSignalMessage _signal = 1;
inline bool MediaAppSignalMessage::has__signal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaAppSignalMessage::set_has__signal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaAppSignalMessage::clear_has__signal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaAppSignalMessage::clear__signal() {
  if (_signal_ != NULL) _signal_->::MediaSignalMessage::Clear();
  clear_has__signal();
}
inline const ::MediaSignalMessage& MediaAppSignalMessage::_signal() const {
  return _signal_ != NULL ? *_signal_ : *default_instance_->_signal_;
}
inline ::MediaSignalMessage* MediaAppSignalMessage::mutable__signal() {
  set_has__signal();
  if (_signal_ == NULL) _signal_ = new ::MediaSignalMessage;
  return _signal_;
}
inline ::MediaSignalMessage* MediaAppSignalMessage::release__signal() {
  clear_has__signal();
  ::MediaSignalMessage* temp = _signal_;
  _signal_ = NULL;
  return temp;
}
inline void MediaAppSignalMessage::set_allocated__signal(::MediaSignalMessage* _signal) {
  delete _signal_;
  _signal_ = _signal;
  if (_signal) {
    set_has__signal();
  } else {
    clear_has__signal();
  }
}

// optional .MediaCallMessage _call = 2;
inline bool MediaAppSignalMessage::has__call() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaAppSignalMessage::set_has__call() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaAppSignalMessage::clear_has__call() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaAppSignalMessage::clear__call() {
  if (_call_ != NULL) _call_->::MediaCallMessage::Clear();
  clear_has__call();
}
inline const ::MediaCallMessage& MediaAppSignalMessage::_call() const {
  return _call_ != NULL ? *_call_ : *default_instance_->_call_;
}
inline ::MediaCallMessage* MediaAppSignalMessage::mutable__call() {
  set_has__call();
  if (_call_ == NULL) _call_ = new ::MediaCallMessage;
  return _call_;
}
inline ::MediaCallMessage* MediaAppSignalMessage::release__call() {
  clear_has__call();
  ::MediaCallMessage* temp = _call_;
  _call_ = NULL;
  return temp;
}
inline void MediaAppSignalMessage::set_allocated__call(::MediaCallMessage* _call) {
  delete _call_;
  _call_ = _call;
  if (_call) {
    set_has__call();
  } else {
    clear_has__call();
  }
}

// optional .MediaAppSignalMessage.MediaMessageBase _base = 3;
inline bool MediaAppSignalMessage::has__base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaAppSignalMessage::set_has__base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaAppSignalMessage::clear_has__base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaAppSignalMessage::clear__base() {
  if (_base_ != NULL) _base_->::MediaAppSignalMessage_MediaMessageBase::Clear();
  clear_has__base();
}
inline const ::MediaAppSignalMessage_MediaMessageBase& MediaAppSignalMessage::_base() const {
  return _base_ != NULL ? *_base_ : *default_instance_->_base_;
}
inline ::MediaAppSignalMessage_MediaMessageBase* MediaAppSignalMessage::mutable__base() {
  set_has__base();
  if (_base_ == NULL) _base_ = new ::MediaAppSignalMessage_MediaMessageBase;
  return _base_;
}
inline ::MediaAppSignalMessage_MediaMessageBase* MediaAppSignalMessage::release__base() {
  clear_has__base();
  ::MediaAppSignalMessage_MediaMessageBase* temp = _base_;
  _base_ = NULL;
  return temp;
}
inline void MediaAppSignalMessage::set_allocated__base(::MediaAppSignalMessage_MediaMessageBase* _base) {
  delete _base_;
  _base_ = _base;
  if (_base) {
    set_has__base();
  } else {
    clear_has__base();
  }
}

// -------------------------------------------------------------------

// MediaSignalMessage_Login

// required string _uid = 1;
inline bool MediaSignalMessage_Login::has__uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaSignalMessage_Login::set_has__uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaSignalMessage_Login::clear_has__uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaSignalMessage_Login::clear__uid() {
  if (_uid_ != &::google::protobuf::internal::kEmptyString) {
    _uid_->clear();
  }
  clear_has__uid();
}
inline const ::std::string& MediaSignalMessage_Login::_uid() const {
  return *_uid_;
}
inline void MediaSignalMessage_Login::set__uid(const ::std::string& value) {
  set_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    _uid_ = new ::std::string;
  }
  _uid_->assign(value);
}
inline void MediaSignalMessage_Login::set__uid(const char* value) {
  set_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    _uid_ = new ::std::string;
  }
  _uid_->assign(value);
}
inline void MediaSignalMessage_Login::set__uid(const char* value, size_t size) {
  set_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    _uid_ = new ::std::string;
  }
  _uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaSignalMessage_Login::mutable__uid() {
  set_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    _uid_ = new ::std::string;
  }
  return _uid_;
}
inline ::std::string* MediaSignalMessage_Login::release__uid() {
  clear_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _uid_;
    _uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaSignalMessage_Login::set_allocated__uid(::std::string* _uid) {
  if (_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete _uid_;
  }
  if (_uid) {
    set_has__uid();
    _uid_ = _uid;
  } else {
    clear_has__uid();
    _uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string _pwd = 2;
inline bool MediaSignalMessage_Login::has__pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaSignalMessage_Login::set_has__pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaSignalMessage_Login::clear_has__pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaSignalMessage_Login::clear__pwd() {
  if (_pwd_ != &::google::protobuf::internal::kEmptyString) {
    _pwd_->clear();
  }
  clear_has__pwd();
}
inline const ::std::string& MediaSignalMessage_Login::_pwd() const {
  return *_pwd_;
}
inline void MediaSignalMessage_Login::set__pwd(const ::std::string& value) {
  set_has__pwd();
  if (_pwd_ == &::google::protobuf::internal::kEmptyString) {
    _pwd_ = new ::std::string;
  }
  _pwd_->assign(value);
}
inline void MediaSignalMessage_Login::set__pwd(const char* value) {
  set_has__pwd();
  if (_pwd_ == &::google::protobuf::internal::kEmptyString) {
    _pwd_ = new ::std::string;
  }
  _pwd_->assign(value);
}
inline void MediaSignalMessage_Login::set__pwd(const char* value, size_t size) {
  set_has__pwd();
  if (_pwd_ == &::google::protobuf::internal::kEmptyString) {
    _pwd_ = new ::std::string;
  }
  _pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaSignalMessage_Login::mutable__pwd() {
  set_has__pwd();
  if (_pwd_ == &::google::protobuf::internal::kEmptyString) {
    _pwd_ = new ::std::string;
  }
  return _pwd_;
}
inline ::std::string* MediaSignalMessage_Login::release__pwd() {
  clear_has__pwd();
  if (_pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _pwd_;
    _pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaSignalMessage_Login::set_allocated__pwd(::std::string* _pwd) {
  if (_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete _pwd_;
  }
  if (_pwd) {
    set_has__pwd();
    _pwd_ = _pwd;
  } else {
    clear_has__pwd();
    _pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string _portal = 3;
inline bool MediaSignalMessage_Login::has__portal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaSignalMessage_Login::set_has__portal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaSignalMessage_Login::clear_has__portal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaSignalMessage_Login::clear__portal() {
  if (_portal_ != &::google::protobuf::internal::kEmptyString) {
    _portal_->clear();
  }
  clear_has__portal();
}
inline const ::std::string& MediaSignalMessage_Login::_portal() const {
  return *_portal_;
}
inline void MediaSignalMessage_Login::set__portal(const ::std::string& value) {
  set_has__portal();
  if (_portal_ == &::google::protobuf::internal::kEmptyString) {
    _portal_ = new ::std::string;
  }
  _portal_->assign(value);
}
inline void MediaSignalMessage_Login::set__portal(const char* value) {
  set_has__portal();
  if (_portal_ == &::google::protobuf::internal::kEmptyString) {
    _portal_ = new ::std::string;
  }
  _portal_->assign(value);
}
inline void MediaSignalMessage_Login::set__portal(const char* value, size_t size) {
  set_has__portal();
  if (_portal_ == &::google::protobuf::internal::kEmptyString) {
    _portal_ = new ::std::string;
  }
  _portal_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaSignalMessage_Login::mutable__portal() {
  set_has__portal();
  if (_portal_ == &::google::protobuf::internal::kEmptyString) {
    _portal_ = new ::std::string;
  }
  return _portal_;
}
inline ::std::string* MediaSignalMessage_Login::release__portal() {
  clear_has__portal();
  if (_portal_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _portal_;
    _portal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaSignalMessage_Login::set_allocated__portal(::std::string* _portal) {
  if (_portal_ != &::google::protobuf::internal::kEmptyString) {
    delete _portal_;
  }
  if (_portal) {
    set_has__portal();
    _portal_ = _portal;
  } else {
    clear_has__portal();
    _portal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MediaSignalMessage_LoginResp

// required string _token = 1;
inline bool MediaSignalMessage_LoginResp::has__token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaSignalMessage_LoginResp::set_has__token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaSignalMessage_LoginResp::clear_has__token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaSignalMessage_LoginResp::clear__token() {
  if (_token_ != &::google::protobuf::internal::kEmptyString) {
    _token_->clear();
  }
  clear_has__token();
}
inline const ::std::string& MediaSignalMessage_LoginResp::_token() const {
  return *_token_;
}
inline void MediaSignalMessage_LoginResp::set__token(const ::std::string& value) {
  set_has__token();
  if (_token_ == &::google::protobuf::internal::kEmptyString) {
    _token_ = new ::std::string;
  }
  _token_->assign(value);
}
inline void MediaSignalMessage_LoginResp::set__token(const char* value) {
  set_has__token();
  if (_token_ == &::google::protobuf::internal::kEmptyString) {
    _token_ = new ::std::string;
  }
  _token_->assign(value);
}
inline void MediaSignalMessage_LoginResp::set__token(const char* value, size_t size) {
  set_has__token();
  if (_token_ == &::google::protobuf::internal::kEmptyString) {
    _token_ = new ::std::string;
  }
  _token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaSignalMessage_LoginResp::mutable__token() {
  set_has__token();
  if (_token_ == &::google::protobuf::internal::kEmptyString) {
    _token_ = new ::std::string;
  }
  return _token_;
}
inline ::std::string* MediaSignalMessage_LoginResp::release__token() {
  clear_has__token();
  if (_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _token_;
    _token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaSignalMessage_LoginResp::set_allocated__token(::std::string* _token) {
  if (_token_ != &::google::protobuf::internal::kEmptyString) {
    delete _token_;
  }
  if (_token) {
    set_has__token();
    _token_ = _token;
  } else {
    clear_has__token();
    _token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 _code = 2;
inline bool MediaSignalMessage_LoginResp::has__code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaSignalMessage_LoginResp::set_has__code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaSignalMessage_LoginResp::clear_has__code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaSignalMessage_LoginResp::clear__code() {
  _code_ = 0u;
  clear_has__code();
}
inline ::google::protobuf::uint32 MediaSignalMessage_LoginResp::_code() const {
  return _code_;
}
inline void MediaSignalMessage_LoginResp::set__code(::google::protobuf::uint32 value) {
  set_has__code();
  _code_ = value;
}

// required string _failed_reason = 3;
inline bool MediaSignalMessage_LoginResp::has__failed_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaSignalMessage_LoginResp::set_has__failed_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaSignalMessage_LoginResp::clear_has__failed_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaSignalMessage_LoginResp::clear__failed_reason() {
  if (_failed_reason_ != &::google::protobuf::internal::kEmptyString) {
    _failed_reason_->clear();
  }
  clear_has__failed_reason();
}
inline const ::std::string& MediaSignalMessage_LoginResp::_failed_reason() const {
  return *_failed_reason_;
}
inline void MediaSignalMessage_LoginResp::set__failed_reason(const ::std::string& value) {
  set_has__failed_reason();
  if (_failed_reason_ == &::google::protobuf::internal::kEmptyString) {
    _failed_reason_ = new ::std::string;
  }
  _failed_reason_->assign(value);
}
inline void MediaSignalMessage_LoginResp::set__failed_reason(const char* value) {
  set_has__failed_reason();
  if (_failed_reason_ == &::google::protobuf::internal::kEmptyString) {
    _failed_reason_ = new ::std::string;
  }
  _failed_reason_->assign(value);
}
inline void MediaSignalMessage_LoginResp::set__failed_reason(const char* value, size_t size) {
  set_has__failed_reason();
  if (_failed_reason_ == &::google::protobuf::internal::kEmptyString) {
    _failed_reason_ = new ::std::string;
  }
  _failed_reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaSignalMessage_LoginResp::mutable__failed_reason() {
  set_has__failed_reason();
  if (_failed_reason_ == &::google::protobuf::internal::kEmptyString) {
    _failed_reason_ = new ::std::string;
  }
  return _failed_reason_;
}
inline ::std::string* MediaSignalMessage_LoginResp::release__failed_reason() {
  clear_has__failed_reason();
  if (_failed_reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _failed_reason_;
    _failed_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaSignalMessage_LoginResp::set_allocated__failed_reason(::std::string* _failed_reason) {
  if (_failed_reason_ != &::google::protobuf::internal::kEmptyString) {
    delete _failed_reason_;
  }
  if (_failed_reason) {
    set_has__failed_reason();
    _failed_reason_ = _failed_reason;
  } else {
    clear_has__failed_reason();
    _failed_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MediaSignalMessage_Logout

// optional string _uid = 1;
inline bool MediaSignalMessage_Logout::has__uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaSignalMessage_Logout::set_has__uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaSignalMessage_Logout::clear_has__uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaSignalMessage_Logout::clear__uid() {
  if (_uid_ != &::google::protobuf::internal::kEmptyString) {
    _uid_->clear();
  }
  clear_has__uid();
}
inline const ::std::string& MediaSignalMessage_Logout::_uid() const {
  return *_uid_;
}
inline void MediaSignalMessage_Logout::set__uid(const ::std::string& value) {
  set_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    _uid_ = new ::std::string;
  }
  _uid_->assign(value);
}
inline void MediaSignalMessage_Logout::set__uid(const char* value) {
  set_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    _uid_ = new ::std::string;
  }
  _uid_->assign(value);
}
inline void MediaSignalMessage_Logout::set__uid(const char* value, size_t size) {
  set_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    _uid_ = new ::std::string;
  }
  _uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaSignalMessage_Logout::mutable__uid() {
  set_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    _uid_ = new ::std::string;
  }
  return _uid_;
}
inline ::std::string* MediaSignalMessage_Logout::release__uid() {
  clear_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _uid_;
    _uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaSignalMessage_Logout::set_allocated__uid(::std::string* _uid) {
  if (_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete _uid_;
  }
  if (_uid) {
    set_has__uid();
    _uid_ = _uid;
  } else {
    clear_has__uid();
    _uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MediaSignalMessage_OnlineStateChange

// required string _uid = 1;
inline bool MediaSignalMessage_OnlineStateChange::has__uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaSignalMessage_OnlineStateChange::set_has__uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaSignalMessage_OnlineStateChange::clear_has__uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaSignalMessage_OnlineStateChange::clear__uid() {
  if (_uid_ != &::google::protobuf::internal::kEmptyString) {
    _uid_->clear();
  }
  clear_has__uid();
}
inline const ::std::string& MediaSignalMessage_OnlineStateChange::_uid() const {
  return *_uid_;
}
inline void MediaSignalMessage_OnlineStateChange::set__uid(const ::std::string& value) {
  set_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    _uid_ = new ::std::string;
  }
  _uid_->assign(value);
}
inline void MediaSignalMessage_OnlineStateChange::set__uid(const char* value) {
  set_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    _uid_ = new ::std::string;
  }
  _uid_->assign(value);
}
inline void MediaSignalMessage_OnlineStateChange::set__uid(const char* value, size_t size) {
  set_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    _uid_ = new ::std::string;
  }
  _uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaSignalMessage_OnlineStateChange::mutable__uid() {
  set_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    _uid_ = new ::std::string;
  }
  return _uid_;
}
inline ::std::string* MediaSignalMessage_OnlineStateChange::release__uid() {
  clear_has__uid();
  if (_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _uid_;
    _uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaSignalMessage_OnlineStateChange::set_allocated__uid(::std::string* _uid) {
  if (_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete _uid_;
  }
  if (_uid) {
    set_has__uid();
    _uid_ = _uid;
  } else {
    clear_has__uid();
    _uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 _state = 2;
inline bool MediaSignalMessage_OnlineStateChange::has__state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaSignalMessage_OnlineStateChange::set_has__state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaSignalMessage_OnlineStateChange::clear_has__state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaSignalMessage_OnlineStateChange::clear__state() {
  _state_ = 0u;
  clear_has__state();
}
inline ::google::protobuf::uint32 MediaSignalMessage_OnlineStateChange::_state() const {
  return _state_;
}
inline void MediaSignalMessage_OnlineStateChange::set__state(::google::protobuf::uint32 value) {
  set_has__state();
  _state_ = value;
}

// -------------------------------------------------------------------

// MediaSignalMessage_ping

// -------------------------------------------------------------------

// MediaSignalMessage_pong

// -------------------------------------------------------------------

// MediaSignalMessage

// optional .MediaSignalMessage.Login _login = 1;
inline bool MediaSignalMessage::has__login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaSignalMessage::set_has__login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaSignalMessage::clear_has__login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaSignalMessage::clear__login() {
  if (_login_ != NULL) _login_->::MediaSignalMessage_Login::Clear();
  clear_has__login();
}
inline const ::MediaSignalMessage_Login& MediaSignalMessage::_login() const {
  return _login_ != NULL ? *_login_ : *default_instance_->_login_;
}
inline ::MediaSignalMessage_Login* MediaSignalMessage::mutable__login() {
  set_has__login();
  if (_login_ == NULL) _login_ = new ::MediaSignalMessage_Login;
  return _login_;
}
inline ::MediaSignalMessage_Login* MediaSignalMessage::release__login() {
  clear_has__login();
  ::MediaSignalMessage_Login* temp = _login_;
  _login_ = NULL;
  return temp;
}
inline void MediaSignalMessage::set_allocated__login(::MediaSignalMessage_Login* _login) {
  delete _login_;
  _login_ = _login;
  if (_login) {
    set_has__login();
  } else {
    clear_has__login();
  }
}

// optional .MediaSignalMessage.Logout _logout = 2;
inline bool MediaSignalMessage::has__logout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaSignalMessage::set_has__logout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaSignalMessage::clear_has__logout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaSignalMessage::clear__logout() {
  if (_logout_ != NULL) _logout_->::MediaSignalMessage_Logout::Clear();
  clear_has__logout();
}
inline const ::MediaSignalMessage_Logout& MediaSignalMessage::_logout() const {
  return _logout_ != NULL ? *_logout_ : *default_instance_->_logout_;
}
inline ::MediaSignalMessage_Logout* MediaSignalMessage::mutable__logout() {
  set_has__logout();
  if (_logout_ == NULL) _logout_ = new ::MediaSignalMessage_Logout;
  return _logout_;
}
inline ::MediaSignalMessage_Logout* MediaSignalMessage::release__logout() {
  clear_has__logout();
  ::MediaSignalMessage_Logout* temp = _logout_;
  _logout_ = NULL;
  return temp;
}
inline void MediaSignalMessage::set_allocated__logout(::MediaSignalMessage_Logout* _logout) {
  delete _logout_;
  _logout_ = _logout;
  if (_logout) {
    set_has__logout();
  } else {
    clear_has__logout();
  }
}

// optional .MediaSignalMessage.OnlineStateChange _stateChanged = 3;
inline bool MediaSignalMessage::has__statechanged() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaSignalMessage::set_has__statechanged() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaSignalMessage::clear_has__statechanged() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaSignalMessage::clear__statechanged() {
  if (_statechanged_ != NULL) _statechanged_->::MediaSignalMessage_OnlineStateChange::Clear();
  clear_has__statechanged();
}
inline const ::MediaSignalMessage_OnlineStateChange& MediaSignalMessage::_statechanged() const {
  return _statechanged_ != NULL ? *_statechanged_ : *default_instance_->_statechanged_;
}
inline ::MediaSignalMessage_OnlineStateChange* MediaSignalMessage::mutable__statechanged() {
  set_has__statechanged();
  if (_statechanged_ == NULL) _statechanged_ = new ::MediaSignalMessage_OnlineStateChange;
  return _statechanged_;
}
inline ::MediaSignalMessage_OnlineStateChange* MediaSignalMessage::release__statechanged() {
  clear_has__statechanged();
  ::MediaSignalMessage_OnlineStateChange* temp = _statechanged_;
  _statechanged_ = NULL;
  return temp;
}
inline void MediaSignalMessage::set_allocated__statechanged(::MediaSignalMessage_OnlineStateChange* _statechanged) {
  delete _statechanged_;
  _statechanged_ = _statechanged;
  if (_statechanged) {
    set_has__statechanged();
  } else {
    clear_has__statechanged();
  }
}

// optional .MediaSignalMessage.ping _ping = 4;
inline bool MediaSignalMessage::has__ping() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MediaSignalMessage::set_has__ping() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MediaSignalMessage::clear_has__ping() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MediaSignalMessage::clear__ping() {
  if (_ping_ != NULL) _ping_->::MediaSignalMessage_ping::Clear();
  clear_has__ping();
}
inline const ::MediaSignalMessage_ping& MediaSignalMessage::_ping() const {
  return _ping_ != NULL ? *_ping_ : *default_instance_->_ping_;
}
inline ::MediaSignalMessage_ping* MediaSignalMessage::mutable__ping() {
  set_has__ping();
  if (_ping_ == NULL) _ping_ = new ::MediaSignalMessage_ping;
  return _ping_;
}
inline ::MediaSignalMessage_ping* MediaSignalMessage::release__ping() {
  clear_has__ping();
  ::MediaSignalMessage_ping* temp = _ping_;
  _ping_ = NULL;
  return temp;
}
inline void MediaSignalMessage::set_allocated__ping(::MediaSignalMessage_ping* _ping) {
  delete _ping_;
  _ping_ = _ping;
  if (_ping) {
    set_has__ping();
  } else {
    clear_has__ping();
  }
}

// optional .MediaSignalMessage.pong _pong = 5;
inline bool MediaSignalMessage::has__pong() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MediaSignalMessage::set_has__pong() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MediaSignalMessage::clear_has__pong() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MediaSignalMessage::clear__pong() {
  if (_pong_ != NULL) _pong_->::MediaSignalMessage_pong::Clear();
  clear_has__pong();
}
inline const ::MediaSignalMessage_pong& MediaSignalMessage::_pong() const {
  return _pong_ != NULL ? *_pong_ : *default_instance_->_pong_;
}
inline ::MediaSignalMessage_pong* MediaSignalMessage::mutable__pong() {
  set_has__pong();
  if (_pong_ == NULL) _pong_ = new ::MediaSignalMessage_pong;
  return _pong_;
}
inline ::MediaSignalMessage_pong* MediaSignalMessage::release__pong() {
  clear_has__pong();
  ::MediaSignalMessage_pong* temp = _pong_;
  _pong_ = NULL;
  return temp;
}
inline void MediaSignalMessage::set_allocated__pong(::MediaSignalMessage_pong* _pong) {
  delete _pong_;
  _pong_ = _pong;
  if (_pong) {
    set_has__pong();
  } else {
    clear_has__pong();
  }
}

// optional .MediaSignalMessage.LoginResp _loginResp = 6;
inline bool MediaSignalMessage::has__loginresp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MediaSignalMessage::set_has__loginresp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MediaSignalMessage::clear_has__loginresp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MediaSignalMessage::clear__loginresp() {
  if (_loginresp_ != NULL) _loginresp_->::MediaSignalMessage_LoginResp::Clear();
  clear_has__loginresp();
}
inline const ::MediaSignalMessage_LoginResp& MediaSignalMessage::_loginresp() const {
  return _loginresp_ != NULL ? *_loginresp_ : *default_instance_->_loginresp_;
}
inline ::MediaSignalMessage_LoginResp* MediaSignalMessage::mutable__loginresp() {
  set_has__loginresp();
  if (_loginresp_ == NULL) _loginresp_ = new ::MediaSignalMessage_LoginResp;
  return _loginresp_;
}
inline ::MediaSignalMessage_LoginResp* MediaSignalMessage::release__loginresp() {
  clear_has__loginresp();
  ::MediaSignalMessage_LoginResp* temp = _loginresp_;
  _loginresp_ = NULL;
  return temp;
}
inline void MediaSignalMessage::set_allocated__loginresp(::MediaSignalMessage_LoginResp* _loginresp) {
  delete _loginresp_;
  _loginresp_ = _loginresp;
  if (_loginresp) {
    set_has__loginresp();
  } else {
    clear_has__loginresp();
  }
}

// -------------------------------------------------------------------

// MediaCallMessage_BaseMesssage

// required string _from = 1;
inline bool MediaCallMessage_BaseMesssage::has__from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaCallMessage_BaseMesssage::set_has__from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaCallMessage_BaseMesssage::clear_has__from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaCallMessage_BaseMesssage::clear__from() {
  if (_from_ != &::google::protobuf::internal::kEmptyString) {
    _from_->clear();
  }
  clear_has__from();
}
inline const ::std::string& MediaCallMessage_BaseMesssage::_from() const {
  return *_from_;
}
inline void MediaCallMessage_BaseMesssage::set__from(const ::std::string& value) {
  set_has__from();
  if (_from_ == &::google::protobuf::internal::kEmptyString) {
    _from_ = new ::std::string;
  }
  _from_->assign(value);
}
inline void MediaCallMessage_BaseMesssage::set__from(const char* value) {
  set_has__from();
  if (_from_ == &::google::protobuf::internal::kEmptyString) {
    _from_ = new ::std::string;
  }
  _from_->assign(value);
}
inline void MediaCallMessage_BaseMesssage::set__from(const char* value, size_t size) {
  set_has__from();
  if (_from_ == &::google::protobuf::internal::kEmptyString) {
    _from_ = new ::std::string;
  }
  _from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaCallMessage_BaseMesssage::mutable__from() {
  set_has__from();
  if (_from_ == &::google::protobuf::internal::kEmptyString) {
    _from_ = new ::std::string;
  }
  return _from_;
}
inline ::std::string* MediaCallMessage_BaseMesssage::release__from() {
  clear_has__from();
  if (_from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _from_;
    _from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaCallMessage_BaseMesssage::set_allocated__from(::std::string* _from) {
  if (_from_ != &::google::protobuf::internal::kEmptyString) {
    delete _from_;
  }
  if (_from) {
    set_has__from();
    _from_ = _from;
  } else {
    clear_has__from();
    _from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string _to = 2;
inline bool MediaCallMessage_BaseMesssage::has__to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaCallMessage_BaseMesssage::set_has__to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaCallMessage_BaseMesssage::clear_has__to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaCallMessage_BaseMesssage::clear__to() {
  if (_to_ != &::google::protobuf::internal::kEmptyString) {
    _to_->clear();
  }
  clear_has__to();
}
inline const ::std::string& MediaCallMessage_BaseMesssage::_to() const {
  return *_to_;
}
inline void MediaCallMessage_BaseMesssage::set__to(const ::std::string& value) {
  set_has__to();
  if (_to_ == &::google::protobuf::internal::kEmptyString) {
    _to_ = new ::std::string;
  }
  _to_->assign(value);
}
inline void MediaCallMessage_BaseMesssage::set__to(const char* value) {
  set_has__to();
  if (_to_ == &::google::protobuf::internal::kEmptyString) {
    _to_ = new ::std::string;
  }
  _to_->assign(value);
}
inline void MediaCallMessage_BaseMesssage::set__to(const char* value, size_t size) {
  set_has__to();
  if (_to_ == &::google::protobuf::internal::kEmptyString) {
    _to_ = new ::std::string;
  }
  _to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaCallMessage_BaseMesssage::mutable__to() {
  set_has__to();
  if (_to_ == &::google::protobuf::internal::kEmptyString) {
    _to_ = new ::std::string;
  }
  return _to_;
}
inline ::std::string* MediaCallMessage_BaseMesssage::release__to() {
  clear_has__to();
  if (_to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _to_;
    _to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaCallMessage_BaseMesssage::set_allocated__to(::std::string* _to) {
  if (_to_ != &::google::protobuf::internal::kEmptyString) {
    delete _to_;
  }
  if (_to) {
    set_has__to();
    _to_ = _to;
  } else {
    clear_has__to();
    _to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string _portal = 3;
inline bool MediaCallMessage_BaseMesssage::has__portal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaCallMessage_BaseMesssage::set_has__portal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaCallMessage_BaseMesssage::clear_has__portal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaCallMessage_BaseMesssage::clear__portal() {
  if (_portal_ != &::google::protobuf::internal::kEmptyString) {
    _portal_->clear();
  }
  clear_has__portal();
}
inline const ::std::string& MediaCallMessage_BaseMesssage::_portal() const {
  return *_portal_;
}
inline void MediaCallMessage_BaseMesssage::set__portal(const ::std::string& value) {
  set_has__portal();
  if (_portal_ == &::google::protobuf::internal::kEmptyString) {
    _portal_ = new ::std::string;
  }
  _portal_->assign(value);
}
inline void MediaCallMessage_BaseMesssage::set__portal(const char* value) {
  set_has__portal();
  if (_portal_ == &::google::protobuf::internal::kEmptyString) {
    _portal_ = new ::std::string;
  }
  _portal_->assign(value);
}
inline void MediaCallMessage_BaseMesssage::set__portal(const char* value, size_t size) {
  set_has__portal();
  if (_portal_ == &::google::protobuf::internal::kEmptyString) {
    _portal_ = new ::std::string;
  }
  _portal_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaCallMessage_BaseMesssage::mutable__portal() {
  set_has__portal();
  if (_portal_ == &::google::protobuf::internal::kEmptyString) {
    _portal_ = new ::std::string;
  }
  return _portal_;
}
inline ::std::string* MediaCallMessage_BaseMesssage::release__portal() {
  clear_has__portal();
  if (_portal_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _portal_;
    _portal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaCallMessage_BaseMesssage::set_allocated__portal(::std::string* _portal) {
  if (_portal_ != &::google::protobuf::internal::kEmptyString) {
    delete _portal_;
  }
  if (_portal) {
    set_has__portal();
    _portal_ = _portal;
  } else {
    clear_has__portal();
    _portal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MediaCallMessage_CallInitiate

// required string _callid = 1;
inline bool MediaCallMessage_CallInitiate::has__callid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaCallMessage_CallInitiate::set_has__callid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaCallMessage_CallInitiate::clear_has__callid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaCallMessage_CallInitiate::clear__callid() {
  if (_callid_ != &::google::protobuf::internal::kEmptyString) {
    _callid_->clear();
  }
  clear_has__callid();
}
inline const ::std::string& MediaCallMessage_CallInitiate::_callid() const {
  return *_callid_;
}
inline void MediaCallMessage_CallInitiate::set__callid(const ::std::string& value) {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  _callid_->assign(value);
}
inline void MediaCallMessage_CallInitiate::set__callid(const char* value) {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  _callid_->assign(value);
}
inline void MediaCallMessage_CallInitiate::set__callid(const char* value, size_t size) {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  _callid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaCallMessage_CallInitiate::mutable__callid() {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  return _callid_;
}
inline ::std::string* MediaCallMessage_CallInitiate::release__callid() {
  clear_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _callid_;
    _callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaCallMessage_CallInitiate::set_allocated__callid(::std::string* _callid) {
  if (_callid_ != &::google::protobuf::internal::kEmptyString) {
    delete _callid_;
  }
  if (_callid) {
    set_has__callid();
    _callid_ = _callid;
  } else {
    clear_has__callid();
    _callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string _caller = 2;
inline bool MediaCallMessage_CallInitiate::has__caller() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaCallMessage_CallInitiate::set_has__caller() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaCallMessage_CallInitiate::clear_has__caller() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaCallMessage_CallInitiate::clear__caller() {
  if (_caller_ != &::google::protobuf::internal::kEmptyString) {
    _caller_->clear();
  }
  clear_has__caller();
}
inline const ::std::string& MediaCallMessage_CallInitiate::_caller() const {
  return *_caller_;
}
inline void MediaCallMessage_CallInitiate::set__caller(const ::std::string& value) {
  set_has__caller();
  if (_caller_ == &::google::protobuf::internal::kEmptyString) {
    _caller_ = new ::std::string;
  }
  _caller_->assign(value);
}
inline void MediaCallMessage_CallInitiate::set__caller(const char* value) {
  set_has__caller();
  if (_caller_ == &::google::protobuf::internal::kEmptyString) {
    _caller_ = new ::std::string;
  }
  _caller_->assign(value);
}
inline void MediaCallMessage_CallInitiate::set__caller(const char* value, size_t size) {
  set_has__caller();
  if (_caller_ == &::google::protobuf::internal::kEmptyString) {
    _caller_ = new ::std::string;
  }
  _caller_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaCallMessage_CallInitiate::mutable__caller() {
  set_has__caller();
  if (_caller_ == &::google::protobuf::internal::kEmptyString) {
    _caller_ = new ::std::string;
  }
  return _caller_;
}
inline ::std::string* MediaCallMessage_CallInitiate::release__caller() {
  clear_has__caller();
  if (_caller_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _caller_;
    _caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaCallMessage_CallInitiate::set_allocated__caller(::std::string* _caller) {
  if (_caller_ != &::google::protobuf::internal::kEmptyString) {
    delete _caller_;
  }
  if (_caller) {
    set_has__caller();
    _caller_ = _caller;
  } else {
    clear_has__caller();
    _caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string _media_session = 3;
inline bool MediaCallMessage_CallInitiate::has__media_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaCallMessage_CallInitiate::set_has__media_session() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaCallMessage_CallInitiate::clear_has__media_session() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaCallMessage_CallInitiate::clear__media_session() {
  if (_media_session_ != &::google::protobuf::internal::kEmptyString) {
    _media_session_->clear();
  }
  clear_has__media_session();
}
inline const ::std::string& MediaCallMessage_CallInitiate::_media_session() const {
  return *_media_session_;
}
inline void MediaCallMessage_CallInitiate::set__media_session(const ::std::string& value) {
  set_has__media_session();
  if (_media_session_ == &::google::protobuf::internal::kEmptyString) {
    _media_session_ = new ::std::string;
  }
  _media_session_->assign(value);
}
inline void MediaCallMessage_CallInitiate::set__media_session(const char* value) {
  set_has__media_session();
  if (_media_session_ == &::google::protobuf::internal::kEmptyString) {
    _media_session_ = new ::std::string;
  }
  _media_session_->assign(value);
}
inline void MediaCallMessage_CallInitiate::set__media_session(const char* value, size_t size) {
  set_has__media_session();
  if (_media_session_ == &::google::protobuf::internal::kEmptyString) {
    _media_session_ = new ::std::string;
  }
  _media_session_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaCallMessage_CallInitiate::mutable__media_session() {
  set_has__media_session();
  if (_media_session_ == &::google::protobuf::internal::kEmptyString) {
    _media_session_ = new ::std::string;
  }
  return _media_session_;
}
inline ::std::string* MediaCallMessage_CallInitiate::release__media_session() {
  clear_has__media_session();
  if (_media_session_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _media_session_;
    _media_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaCallMessage_CallInitiate::set_allocated__media_session(::std::string* _media_session) {
  if (_media_session_ != &::google::protobuf::internal::kEmptyString) {
    delete _media_session_;
  }
  if (_media_session) {
    set_has__media_session();
    _media_session_ = _media_session;
  } else {
    clear_has__media_session();
    _media_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MediaCallMessage_CallAccept

// required string _callid = 1;
inline bool MediaCallMessage_CallAccept::has__callid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaCallMessage_CallAccept::set_has__callid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaCallMessage_CallAccept::clear_has__callid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaCallMessage_CallAccept::clear__callid() {
  if (_callid_ != &::google::protobuf::internal::kEmptyString) {
    _callid_->clear();
  }
  clear_has__callid();
}
inline const ::std::string& MediaCallMessage_CallAccept::_callid() const {
  return *_callid_;
}
inline void MediaCallMessage_CallAccept::set__callid(const ::std::string& value) {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  _callid_->assign(value);
}
inline void MediaCallMessage_CallAccept::set__callid(const char* value) {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  _callid_->assign(value);
}
inline void MediaCallMessage_CallAccept::set__callid(const char* value, size_t size) {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  _callid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaCallMessage_CallAccept::mutable__callid() {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  return _callid_;
}
inline ::std::string* MediaCallMessage_CallAccept::release__callid() {
  clear_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _callid_;
    _callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaCallMessage_CallAccept::set_allocated__callid(::std::string* _callid) {
  if (_callid_ != &::google::protobuf::internal::kEmptyString) {
    delete _callid_;
  }
  if (_callid) {
    set_has__callid();
    _callid_ = _callid;
  } else {
    clear_has__callid();
    _callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string _callee = 2;
inline bool MediaCallMessage_CallAccept::has__callee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaCallMessage_CallAccept::set_has__callee() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaCallMessage_CallAccept::clear_has__callee() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaCallMessage_CallAccept::clear__callee() {
  if (_callee_ != &::google::protobuf::internal::kEmptyString) {
    _callee_->clear();
  }
  clear_has__callee();
}
inline const ::std::string& MediaCallMessage_CallAccept::_callee() const {
  return *_callee_;
}
inline void MediaCallMessage_CallAccept::set__callee(const ::std::string& value) {
  set_has__callee();
  if (_callee_ == &::google::protobuf::internal::kEmptyString) {
    _callee_ = new ::std::string;
  }
  _callee_->assign(value);
}
inline void MediaCallMessage_CallAccept::set__callee(const char* value) {
  set_has__callee();
  if (_callee_ == &::google::protobuf::internal::kEmptyString) {
    _callee_ = new ::std::string;
  }
  _callee_->assign(value);
}
inline void MediaCallMessage_CallAccept::set__callee(const char* value, size_t size) {
  set_has__callee();
  if (_callee_ == &::google::protobuf::internal::kEmptyString) {
    _callee_ = new ::std::string;
  }
  _callee_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaCallMessage_CallAccept::mutable__callee() {
  set_has__callee();
  if (_callee_ == &::google::protobuf::internal::kEmptyString) {
    _callee_ = new ::std::string;
  }
  return _callee_;
}
inline ::std::string* MediaCallMessage_CallAccept::release__callee() {
  clear_has__callee();
  if (_callee_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _callee_;
    _callee_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaCallMessage_CallAccept::set_allocated__callee(::std::string* _callee) {
  if (_callee_ != &::google::protobuf::internal::kEmptyString) {
    delete _callee_;
  }
  if (_callee) {
    set_has__callee();
    _callee_ = _callee;
  } else {
    clear_has__callee();
    _callee_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MediaCallMessage_CallTerminate

// required string _callid = 1;
inline bool MediaCallMessage_CallTerminate::has__callid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaCallMessage_CallTerminate::set_has__callid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaCallMessage_CallTerminate::clear_has__callid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaCallMessage_CallTerminate::clear__callid() {
  if (_callid_ != &::google::protobuf::internal::kEmptyString) {
    _callid_->clear();
  }
  clear_has__callid();
}
inline const ::std::string& MediaCallMessage_CallTerminate::_callid() const {
  return *_callid_;
}
inline void MediaCallMessage_CallTerminate::set__callid(const ::std::string& value) {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  _callid_->assign(value);
}
inline void MediaCallMessage_CallTerminate::set__callid(const char* value) {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  _callid_->assign(value);
}
inline void MediaCallMessage_CallTerminate::set__callid(const char* value, size_t size) {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  _callid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaCallMessage_CallTerminate::mutable__callid() {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  return _callid_;
}
inline ::std::string* MediaCallMessage_CallTerminate::release__callid() {
  clear_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _callid_;
    _callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaCallMessage_CallTerminate::set_allocated__callid(::std::string* _callid) {
  if (_callid_ != &::google::protobuf::internal::kEmptyString) {
    delete _callid_;
  }
  if (_callid) {
    set_has__callid();
    _callid_ = _callid;
  } else {
    clear_has__callid();
    _callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 _reason = 2;
inline bool MediaCallMessage_CallTerminate::has__reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaCallMessage_CallTerminate::set_has__reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaCallMessage_CallTerminate::clear_has__reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaCallMessage_CallTerminate::clear__reason() {
  _reason_ = 0u;
  clear_has__reason();
}
inline ::google::protobuf::uint32 MediaCallMessage_CallTerminate::_reason() const {
  return _reason_;
}
inline void MediaCallMessage_CallTerminate::set__reason(::google::protobuf::uint32 value) {
  set_has__reason();
  _reason_ = value;
}

// -------------------------------------------------------------------

// MediaCallMessage_CallInvite

// required string _callid = 1;
inline bool MediaCallMessage_CallInvite::has__callid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaCallMessage_CallInvite::set_has__callid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaCallMessage_CallInvite::clear_has__callid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaCallMessage_CallInvite::clear__callid() {
  if (_callid_ != &::google::protobuf::internal::kEmptyString) {
    _callid_->clear();
  }
  clear_has__callid();
}
inline const ::std::string& MediaCallMessage_CallInvite::_callid() const {
  return *_callid_;
}
inline void MediaCallMessage_CallInvite::set__callid(const ::std::string& value) {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  _callid_->assign(value);
}
inline void MediaCallMessage_CallInvite::set__callid(const char* value) {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  _callid_->assign(value);
}
inline void MediaCallMessage_CallInvite::set__callid(const char* value, size_t size) {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  _callid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaCallMessage_CallInvite::mutable__callid() {
  set_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    _callid_ = new ::std::string;
  }
  return _callid_;
}
inline ::std::string* MediaCallMessage_CallInvite::release__callid() {
  clear_has__callid();
  if (_callid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _callid_;
    _callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaCallMessage_CallInvite::set_allocated__callid(::std::string* _callid) {
  if (_callid_ != &::google::protobuf::internal::kEmptyString) {
    delete _callid_;
  }
  if (_callid) {
    set_has__callid();
    _callid_ = _callid;
  } else {
    clear_has__callid();
    _callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string _media_session = 2;
inline bool MediaCallMessage_CallInvite::has__media_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaCallMessage_CallInvite::set_has__media_session() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaCallMessage_CallInvite::clear_has__media_session() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaCallMessage_CallInvite::clear__media_session() {
  if (_media_session_ != &::google::protobuf::internal::kEmptyString) {
    _media_session_->clear();
  }
  clear_has__media_session();
}
inline const ::std::string& MediaCallMessage_CallInvite::_media_session() const {
  return *_media_session_;
}
inline void MediaCallMessage_CallInvite::set__media_session(const ::std::string& value) {
  set_has__media_session();
  if (_media_session_ == &::google::protobuf::internal::kEmptyString) {
    _media_session_ = new ::std::string;
  }
  _media_session_->assign(value);
}
inline void MediaCallMessage_CallInvite::set__media_session(const char* value) {
  set_has__media_session();
  if (_media_session_ == &::google::protobuf::internal::kEmptyString) {
    _media_session_ = new ::std::string;
  }
  _media_session_->assign(value);
}
inline void MediaCallMessage_CallInvite::set__media_session(const char* value, size_t size) {
  set_has__media_session();
  if (_media_session_ == &::google::protobuf::internal::kEmptyString) {
    _media_session_ = new ::std::string;
  }
  _media_session_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaCallMessage_CallInvite::mutable__media_session() {
  set_has__media_session();
  if (_media_session_ == &::google::protobuf::internal::kEmptyString) {
    _media_session_ = new ::std::string;
  }
  return _media_session_;
}
inline ::std::string* MediaCallMessage_CallInvite::release__media_session() {
  clear_has__media_session();
  if (_media_session_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = _media_session_;
    _media_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaCallMessage_CallInvite::set_allocated__media_session(::std::string* _media_session) {
  if (_media_session_ != &::google::protobuf::internal::kEmptyString) {
    delete _media_session_;
  }
  if (_media_session) {
    set_has__media_session();
    _media_session_ = _media_session;
  } else {
    clear_has__media_session();
    _media_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MediaCallMessage

// required .MediaCallMessage.BaseMesssage _base = 1;
inline bool MediaCallMessage::has__base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaCallMessage::set_has__base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaCallMessage::clear_has__base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaCallMessage::clear__base() {
  if (_base_ != NULL) _base_->::MediaCallMessage_BaseMesssage::Clear();
  clear_has__base();
}
inline const ::MediaCallMessage_BaseMesssage& MediaCallMessage::_base() const {
  return _base_ != NULL ? *_base_ : *default_instance_->_base_;
}
inline ::MediaCallMessage_BaseMesssage* MediaCallMessage::mutable__base() {
  set_has__base();
  if (_base_ == NULL) _base_ = new ::MediaCallMessage_BaseMesssage;
  return _base_;
}
inline ::MediaCallMessage_BaseMesssage* MediaCallMessage::release__base() {
  clear_has__base();
  ::MediaCallMessage_BaseMesssage* temp = _base_;
  _base_ = NULL;
  return temp;
}
inline void MediaCallMessage::set_allocated__base(::MediaCallMessage_BaseMesssage* _base) {
  delete _base_;
  _base_ = _base;
  if (_base) {
    set_has__base();
  } else {
    clear_has__base();
  }
}

// optional .MediaCallMessage.CallInitiate _call_initiate = 2;
inline bool MediaCallMessage::has__call_initiate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaCallMessage::set_has__call_initiate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaCallMessage::clear_has__call_initiate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaCallMessage::clear__call_initiate() {
  if (_call_initiate_ != NULL) _call_initiate_->::MediaCallMessage_CallInitiate::Clear();
  clear_has__call_initiate();
}
inline const ::MediaCallMessage_CallInitiate& MediaCallMessage::_call_initiate() const {
  return _call_initiate_ != NULL ? *_call_initiate_ : *default_instance_->_call_initiate_;
}
inline ::MediaCallMessage_CallInitiate* MediaCallMessage::mutable__call_initiate() {
  set_has__call_initiate();
  if (_call_initiate_ == NULL) _call_initiate_ = new ::MediaCallMessage_CallInitiate;
  return _call_initiate_;
}
inline ::MediaCallMessage_CallInitiate* MediaCallMessage::release__call_initiate() {
  clear_has__call_initiate();
  ::MediaCallMessage_CallInitiate* temp = _call_initiate_;
  _call_initiate_ = NULL;
  return temp;
}
inline void MediaCallMessage::set_allocated__call_initiate(::MediaCallMessage_CallInitiate* _call_initiate) {
  delete _call_initiate_;
  _call_initiate_ = _call_initiate;
  if (_call_initiate) {
    set_has__call_initiate();
  } else {
    clear_has__call_initiate();
  }
}

// optional .MediaCallMessage.CallAccept _call_accept = 3;
inline bool MediaCallMessage::has__call_accept() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaCallMessage::set_has__call_accept() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaCallMessage::clear_has__call_accept() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaCallMessage::clear__call_accept() {
  if (_call_accept_ != NULL) _call_accept_->::MediaCallMessage_CallAccept::Clear();
  clear_has__call_accept();
}
inline const ::MediaCallMessage_CallAccept& MediaCallMessage::_call_accept() const {
  return _call_accept_ != NULL ? *_call_accept_ : *default_instance_->_call_accept_;
}
inline ::MediaCallMessage_CallAccept* MediaCallMessage::mutable__call_accept() {
  set_has__call_accept();
  if (_call_accept_ == NULL) _call_accept_ = new ::MediaCallMessage_CallAccept;
  return _call_accept_;
}
inline ::MediaCallMessage_CallAccept* MediaCallMessage::release__call_accept() {
  clear_has__call_accept();
  ::MediaCallMessage_CallAccept* temp = _call_accept_;
  _call_accept_ = NULL;
  return temp;
}
inline void MediaCallMessage::set_allocated__call_accept(::MediaCallMessage_CallAccept* _call_accept) {
  delete _call_accept_;
  _call_accept_ = _call_accept;
  if (_call_accept) {
    set_has__call_accept();
  } else {
    clear_has__call_accept();
  }
}

// optional .MediaCallMessage.CallTerminate _call_terminate = 4;
inline bool MediaCallMessage::has__call_terminate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MediaCallMessage::set_has__call_terminate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MediaCallMessage::clear_has__call_terminate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MediaCallMessage::clear__call_terminate() {
  if (_call_terminate_ != NULL) _call_terminate_->::MediaCallMessage_CallTerminate::Clear();
  clear_has__call_terminate();
}
inline const ::MediaCallMessage_CallTerminate& MediaCallMessage::_call_terminate() const {
  return _call_terminate_ != NULL ? *_call_terminate_ : *default_instance_->_call_terminate_;
}
inline ::MediaCallMessage_CallTerminate* MediaCallMessage::mutable__call_terminate() {
  set_has__call_terminate();
  if (_call_terminate_ == NULL) _call_terminate_ = new ::MediaCallMessage_CallTerminate;
  return _call_terminate_;
}
inline ::MediaCallMessage_CallTerminate* MediaCallMessage::release__call_terminate() {
  clear_has__call_terminate();
  ::MediaCallMessage_CallTerminate* temp = _call_terminate_;
  _call_terminate_ = NULL;
  return temp;
}
inline void MediaCallMessage::set_allocated__call_terminate(::MediaCallMessage_CallTerminate* _call_terminate) {
  delete _call_terminate_;
  _call_terminate_ = _call_terminate;
  if (_call_terminate) {
    set_has__call_terminate();
  } else {
    clear_has__call_terminate();
  }
}

// optional .MediaCallMessage.CallInvite _call_invite = 5;
inline bool MediaCallMessage::has__call_invite() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MediaCallMessage::set_has__call_invite() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MediaCallMessage::clear_has__call_invite() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MediaCallMessage::clear__call_invite() {
  if (_call_invite_ != NULL) _call_invite_->::MediaCallMessage_CallInvite::Clear();
  clear_has__call_invite();
}
inline const ::MediaCallMessage_CallInvite& MediaCallMessage::_call_invite() const {
  return _call_invite_ != NULL ? *_call_invite_ : *default_instance_->_call_invite_;
}
inline ::MediaCallMessage_CallInvite* MediaCallMessage::mutable__call_invite() {
  set_has__call_invite();
  if (_call_invite_ == NULL) _call_invite_ = new ::MediaCallMessage_CallInvite;
  return _call_invite_;
}
inline ::MediaCallMessage_CallInvite* MediaCallMessage::release__call_invite() {
  clear_has__call_invite();
  ::MediaCallMessage_CallInvite* temp = _call_invite_;
  _call_invite_ = NULL;
  return temp;
}
inline void MediaCallMessage::set_allocated__call_invite(::MediaCallMessage_CallInvite* _call_invite) {
  delete _call_invite_;
  _call_invite_ = _call_invite;
  if (_call_invite) {
    set_has__call_invite();
  } else {
    clear_has__call_invite();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobuf_2fmediaappsingnal_2eproto__INCLUDED
